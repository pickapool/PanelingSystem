@page "/u/schedule"

<RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 88vh;" TItem="ScheduleModel" Data=@appointments StartProperty="Start" EndProperty="End"
    TextProperty="Text" SelectedIndex="2"
    SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender
    AppointmentMove=@OnAppointmentMove >
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
</RadzenScheduler>
<MudDrawer Class="pa-2" @bind-Open="@openRight" Fixed="false" Anchor="Anchor.Right" Width="25%" Elevation="1" Variant="@DrawerVariant.Temporary" DisableOverlay>
    <MudDrawerHeader>
        <MudIconButton style="height: 20px;" OnClick="()=> ToggleRightDrawer()" Icon="@Icons.Material.Filled.Close" aria-label="delete" Size="Size.Small"></MudIconButton>
    </MudDrawerHeader>
    <div class="d-flex flex-column gap-2">

    </div>
    <MudFab Class="fab-btn" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small"/>
</MudDrawer>
@code {
    RadzenScheduler<ScheduleModel> scheduler;
    bool openRight = false;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();
    void ToggleRightDrawer()
    {
        openRight = !openRight;
    }
    IList<ScheduleModel> appointments = new List<ScheduleModel>
    {
        new ScheduleModel { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Text = "Birthday" },
        new ScheduleModel { Start = DateTime.Today.AddDays(-11), End = DateTime.Today.AddDays(-10), Text = "Day off" },
        new ScheduleModel { Start = DateTime.Today.AddDays(-10), End = DateTime.Today.AddDays(-8), Text = "Work from home" },
        new ScheduleModel { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(12), Text = "Online meeting" },
        new ScheduleModel { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(13), Text = "Skype call" },
        new ScheduleModel { Start = DateTime.Today.AddHours(14), End = DateTime.Today.AddHours(14).AddMinutes(30), Text = "Dentist appointment" },
        new ScheduleModel { Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(12), Text = "Vacation" },
    };

    void OnSlotRender(Radzen.SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnSlotSelect(Radzen.SchedulerSlotSelectEventArgs args)
    {
        ToggleRightDrawer();
        if (args.View.Text != "Year")
        {
            @* Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
                new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

            if (data != null)
            {
                appointments.Add(data);
                // Either call the Reload method or reassign the Data property of the Scheduler
                await scheduler.Reload();
            } *@
        }
    }

    async Task OnAppointmentSelect(Radzen.SchedulerAppointmentSelectEventArgs<ScheduleModel> args)
    {
        var copy = new ScheduleModel
        {
            Start = args.Data.Start,
            End = args.Data.End,
        };

        @* var data = await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", copy } });

        if (data != null)
        {
            // Update the appointment
            args.Data.Start = data.Start;
            args.Data.End = data.End;
            args.Data.Text = data.Text;
        } *@

        await scheduler.Reload();
    }

    void OnAppointmentRender(Radzen.SchedulerAppointmentRenderEventArgs<ScheduleModel> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        @* if (args.Data.Group.Groupname == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        } *@
    }

    async Task OnAppointmentMove(Radzen.SchedulerAppointmentMoveEventArgs args)
    {
        var draggedAppointment = appointments.FirstOrDefault(x => x == args.Appointment.Data);

        if (draggedAppointment != null)
        {
            draggedAppointment.Start = draggedAppointment.Start + args.TimeSpan;

            draggedAppointment.End = draggedAppointment.End + args.TimeSpan;

            await scheduler.Reload();
        }
    }
}
<style>
    .fab-btn
    {
        position: absolute;
        left: 0;
        bottom: 0;
        margin-bottom: 10px;
        margin-left: 10px;
    }
    .mud-drawer-header
    {
        padding: unset !important;
    }
</style>