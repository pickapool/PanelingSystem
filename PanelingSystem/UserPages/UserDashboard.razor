@page "/u/dashboard"

@inject IFileService FileService
@inject AppState AppState
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IScheduleService ScheduleService
@inject IGroupService GroupService
@inject IPanelistService PanelistService

<div class="d-flex justify-content-center align-items-center">
        @if(GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Student)
        {
            <MudPaper Class="pa-2" Elevation="3" Height="88vh" Width="100%">
            <MudGrid Spacing="2">
                <MudItem xs="3">
                    <MudSelect Value="@Group" 
                    ValueChanged="(GroupModel g)=> GetFiles(g)"
                    Margin="Margin.Dense" Text=""
                    Label="Select Group" HelperText="Required*" Placeholder="Group" AdornmentIcon="@Icons.Material.Filled.People" AdornmentColor="Color.Primary">
                        @foreach (var g in ListGroups.ToList())
                        {
                            <MudSelectItem Value="@g">@g.Groupname</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="5"></MudItem>
                <MudItem xs="4"></MudItem>
                @if(Group.GroupId > 0)
                {
                    <MudItem xs="4">
                        <FileUploadComponent IsShowUpload="true" GroupId="Group.GroupId" Position="@Enums.FilePosition.Title" FileModels="@fileModels"/>
                    </MudItem>
                    <MudItem xs="4">
                        <FileUploadComponent IsShowUpload="true" GroupId="Group.GroupId" Position="@Enums.FilePosition.PreOral" FileModels="@fileModels"/>
                    </MudItem>
                    <MudItem xs="4">
                        <FileUploadComponent IsShowUpload="true" GroupId="Group.GroupId" Position="@Enums.FilePosition.Finals" FileModels="@fileModels"/>
                </MudItem>  
                }
            </MudGrid>
            </MudPaper>
        } else {
            @if(!isDataFetch) {
                <MudProgressCircular Class="centered-element" Color="Color.Primary" Indeterminate="true"/>
            } else {
            <MudPaper Class="pa-2 d-flex flex-row justify-content-center align-items-center position-relative overflow-y-auto" Elevation="3" Height="88vh" Width="100%">
                <MudButton style="position: absolute; top: 0;right:0;" OnClick="Toggle" Variant="MudBlazor.Variant.Text" EndIcon="@Icons.Material.Filled.FilterList">FILTER</MudButton>
                <MudPopover Open="@_isOpen" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopLeft" Fixed="true" Class="px-4 pt-4" style="width: 400px;">
                    <MudGrid Spacing="1" Class="mb-4">
                        <MudItem Class="d-flex" xs="12">
                            <MudText Typo="Typo.button">FILTER</MudText>
                        </MudItem>
                        <MudItem Class="mb-2" xs="12">
                            <MudDivider/>
                        </MudItem>
                        <MudItem xs=2><MudCheckBox @bind-Value="parameter.IsProgram"></MudCheckBox></MudItem>
                        <MudItem xs=10>
                            <MudTextField @bind-Value="parameter.ProgramName" Label="Program" Variant='MudBlazor.Variant.Outlined' Margin='Margin.Dense' Disabled="!parameter.IsProgram"/>
                        </MudItem>
                        <MudItem xs=2><MudCheckBox @bind-Value="parameter.IsSection"></MudCheckBox></MudItem>
                        <MudItem xs=10>
                            <MudTextField @bind-Value="parameter.SectionName" Label="Section" Variant='MudBlazor.Variant.Outlined' Margin='Margin.Dense' Disabled="!parameter.IsSection"/>
                        </MudItem>
                        <MudItem xs=2><MudCheckBox @bind-Value="parameter.IsYear"></MudCheckBox></MudItem>
                        <MudItem xs=10>
                            <MudTextField @bind-Value="parameter.Year" Label="Year" Variant='MudBlazor.Variant.Outlined' Margin='Margin.Dense' Disabled="!parameter.IsYear"/>
                        </MudItem>
                        <MudItem xs="7"></MudItem>
                        <MudItem xs="5">
                            <MudButton OnClick="@Toggle" Class="ml-auto mr-1 mb-3" Color="MudBlazor.Color.Default">Close</MudButton>
                            <MudButton OnClick="@Filter" Class="ml-auto mr-n3 mb-3" Variant="MudBlazor.Variant.Filled" Color="Color.Info">Filter</MudButton> 
                        </MudItem>
                    </MudGrid>
                </MudPopover>
                <div class="d-flex flex-column" style="width: 100%;">
                    <div class="d-flex flex-row justify-content-center align-items-center gap-7" style="height: calc(100vh - 300px);">
                        <div>
                            <MudText Class="text-center" Typo="Typo.h2" style="font-size: 30px;">TITLE DEFENSE</MudText>
                            <MudChart ChartType="ChartType.Pie" InputData="@data" @bind-SelectedIndex="Index" InputLabels="@labels" Width="300px" Height="300px"/>
                        </div>
                        <div>
                            <MudText Class="text-center" Typo="Typo.h2" style="font-size: 30px;">PRE ORAL DEFENSE</MudText>
                            <MudChart ChartType="ChartType.Pie" InputData="@data1" @bind-SelectedIndex="Index" InputLabels="@labels1" Width="300px" Height="300px" />
                        </div>
                        <div>
                            <MudText Class="text-center" Typo="Typo.h2" style="font-size: 30px;">FINAL DEFENSE</MudText>
                            <MudChart ChartType="ChartType.Pie" InputData="@data2" @bind-SelectedIndex="Index" InputLabels="@labels2" Width="300px" Height="300px" />
                        </div>
                    </div>
                    <div class="d-flex justify-content-center flex-row gap-3" Width="100%">
                            @if (!isDataFetch)
                            {
                                <MudProgressCircular class="align-self-center" Color="Color.Primary" Indeterminate="true" />
                            }
                            else
                            {
                            <MudTable Class="flex-1" Items="@DefenseVerdicts.Where( e => e.Status == Enums.Status.Approved).DistinctBy( e => e.GroupId).ToList()" Hover="true" Dense
                                Breakpoint="Breakpoint.Sm"  LoadingProgressColor="Color.Info">
                                <ToolBarContent>
                                    <MudText Typo="Typo.h6">APPROVED</MudText>
                                    <MudSpacer />
                                </ToolBarContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Nr">
                                        <div class="d-flex flex-row justify-content-between align-items-center">
                                            <span>@context.Group?.GroupThesisTitle</span>
                                            <MudChip T="string" Color="Color.Success" Size="Size.Small">@Extensions.GetEnumDescription(context.Chapter)</MudChip>
                                        </div>

                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                            <MudTable Class="flex-1" Items="@DefenseVerdicts.Where( e => e.Status == Enums.Status.Rejected).DistinctBy( e => e.GroupId).ToList()" Hover="true" Dense
                                Breakpoint="Breakpoint.Sm"  LoadingProgressColor="Color.Info">
                                <ToolBarContent>
                                    <MudText Typo="Typo.h6">REJECTED</MudText>
                                    <MudSpacer />
                                </ToolBarContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Nr">
                                        <div class="d-flex flex-row justify-content-between align-items-center">
                                            <span>@context.Group?.GroupThesisTitle</span>
                                            <MudChip T="string" Color="Color.Success" Size="Size.Small">@Extensions.GetEnumDescription(context.Chapter)</MudChip>
                                        </div>

                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                            <MudTable Class="flex-1" Items="@DefenseVerdicts.Where( e => e.Status == Enums.Status.Completed).DistinctBy( e => e.GroupId).ToList()" Hover="true" Dense
                                Breakpoint="Breakpoint.Sm"  LoadingProgressColor="Color.Info">
                                <ToolBarContent>
                                    <MudText Typo="Typo.h6">COMPLETED</MudText>
                                    <MudSpacer />
                                </ToolBarContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Nr">
                                        <div class="d-flex flex-row justify-content-between align-items-center">
                                            <span>@context.Group?.GroupThesisTitle</span>
                                            <MudChip T="string" Color="Color.Success" Size="Size.Small">@Extensions.GetEnumDescription(context.Chapter)</MudChip>
                                        </div>

                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        }
                    </div>
                </div>
                
            </MudPaper>
            }
            
        }
</div>
@code
{
    bool isDataFetch;
    List<GroupModel> Groups = new();
    IList<ScheduleModel> Schedules;
    List<DefenseVerdictModel> DefenseVerdicts = new();
    private List<GroupModel> ListGroups = new();
    private GroupModel Group = new();
    bool show,show1 = false;
    List<FileModel> fileModels = new();
    public bool _isOpen, IsLoading;
    FilterParameter parameter = new();
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize = 3;
    double[] data = { 77, 25, 20};
    string[] labels = { "Title" , "Pre Oral" , "Final" };
    double[] data1 = { 77, 25, 20};
    string[] labels1 = { "Title" , "Pre Oral" , "Final" };
    double[] data2 = { 77, 25, 20};
    string[] labels2 = { "Title" , "Pre Oral" , "Final" };

    protected override async Task OnInitializedAsync()
    {
        Task<IEnumerable<GroupModel>> data = GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Student ? 
        GroupService.GetMyGroups(GlobalClass.CurrentUserAccount.UserId, new()) : GroupService.GetGroups(new());
        await data;
        if(data.Status == TaskStatus.RanToCompletion)
        {
            ListGroups = data.Result.ToList();
            //OLd
            // if (GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
            // {
            //     ListGroups = ListGroups.Where(e => e.UserId == GlobalClass.CurrentUserAccount.UserId).ToList();
            // }
            if (GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
            {
                foreach (var item in ListGroups)
                {
                    Task<IEnumerable<PanelistModel>> p = PanelistService.GetPanelGroup(item.GroupId);
                    await p;
                    if (p.Status == TaskStatus.RanToCompletion)
                    {
                        item.ListOfPanels = p.Result.ToList();
                    }

                }
                ListGroups = ListGroups.Where(e => e.UserId == GlobalClass.CurrentUserAccount.UserId || e.ListOfPanels.Any(b => b.Panel.UserId == GlobalClass.CurrentUserAccount.UserId)).ToList();
            }
            Group = ListGroups.FirstOrDefault() ?? new();
            await GetFiles(Group);
        }
    }
    public void Toggle()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }
    private async Task Filter()
    {
        isDataFetch = false;
        Task<IEnumerable<GroupModel>> data = GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Student ? 
        GroupService.GetMyGroups(GlobalClass.CurrentUserAccount.UserId, parameter) : GroupService.GetGroups(parameter);
        await data;
        if(data.Status == TaskStatus.RanToCompletion)
        {
            ListGroups = data.Result.ToList();
            if (GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
            {
                ListGroups = ListGroups.Where(e => e.UserId == GlobalClass.CurrentUserAccount.UserId).ToList();
            }
            Group = ListGroups.FirstOrDefault() ?? new();
            await GetFiles(Group);
            Toggle();
        }
    }
    private async Task GetFiles(GroupModel groupModel)
    {
        Group = groupModel;
        Task<IEnumerable<FileModel>> task = FileService.GetFiles();
        await task;
        if(task.Status == TaskStatus.RanToCompletion)
        {
            fileModels = task.Result.ToList()?? new();
            await Task.Delay(1000);
            await GetSchedules();
        }
        StateHasChanged();
    }
    private async Task GetSchedules()
    {
        Task<IEnumerable<ScheduleModel>> schedules = ScheduleService.GetSchedules(parameter);
        await schedules;
        if(schedules.Status == TaskStatus.RanToCompletion)
        {
            @* double t1 = schedules.Result.Where( e => e.Status == Enums.Status.InProgress && e.DefenseType == Enums.FilePosition.Title).ToList().Count;
            double t2 = schedules.Result.Where( e => e.Status == Enums.Status.Failed && e.DefenseType == Enums.FilePosition.Title).ToList().Count;
            double t3 = schedules.Result.Where( e => e.Status == Enums.Status.Success && e.DefenseType == Enums.FilePosition.Title).ToList().Count;
            double t4 = schedules.Result.Where( e => e.Status == Enums.Status.Pending && e.DefenseType == Enums.FilePosition.Title).ToList().Count;
            double t5 = schedules.Result.Where( e => e.Status == Enums.Status.Rejected && e.DefenseType == Enums.FilePosition.Title).ToList().Count;
            double t6 = schedules.Result.Where( e => e.Status == Enums.Status.Completed && e.DefenseType == Enums.FilePosition.Title).ToList().Count;
            double t7= schedules.Result.Where( e => e.Status == Enums.Status.Redefend && e.DefenseType == Enums.FilePosition.Title).ToList().Count;
            double t8= schedules.Result.Where( e => e.Status == Enums.Status.AcceptedWithRevisions && e.DefenseType == Enums.FilePosition.Title).ToList().Count;

            double p1 = schedules.Result.Where( e => e.Status == Enums.Status.InProgress && e.DefenseType == Enums.FilePosition.PreOral).ToList().Count;
            double p2 = schedules.Result.Where( e => e.Status == Enums.Status.Failed && e.DefenseType == Enums.FilePosition.PreOral).ToList().Count;
            double p3 = schedules.Result.Where( e => e.Status == Enums.Status.Success && e.DefenseType == Enums.FilePosition.PreOral).ToList().Count;
            double p4 = schedules.Result.Where( e => e.Status == Enums.Status.Pending && e.DefenseType == Enums.FilePosition.PreOral).ToList().Count;
            double p5 = schedules.Result.Where( e => e.Status == Enums.Status.Rejected && e.DefenseType == Enums.FilePosition.PreOral).ToList().Count;
            double p6 = schedules.Result.Where( e => e.Status == Enums.Status.Completed && e.DefenseType == Enums.FilePosition.PreOral).ToList().Count;
            double p7 = schedules.Result.Where( e => e.Status == Enums.Status.Redefend && e.DefenseType == Enums.FilePosition.PreOral).ToList().Count;
            double p8 = schedules.Result.Where( e => e.Status == Enums.Status.AcceptedWithRevisions && e.DefenseType == Enums.FilePosition.PreOral).ToList().Count;

            double d1 = schedules.Result.Where( e => e.Status == Enums.Status.InProgress && e.DefenseType == Enums.FilePosition.Finals).ToList().Count;
            double d2 = schedules.Result.Where( e => e.Status == Enums.Status.Failed && e.DefenseType == Enums.FilePosition.Finals).ToList().Count;
            double d3 = schedules.Result.Where( e => e.Status == Enums.Status.Success && e.DefenseType == Enums.FilePosition.Finals).ToList().Count;
            double d4 = schedules.Result.Where( e => e.Status == Enums.Status.Pending && e.DefenseType == Enums.FilePosition.Finals).ToList().Count;
            double d5 = schedules.Result.Where( e => e.Status == Enums.Status.Rejected && e.DefenseType == Enums.FilePosition.Finals).ToList().Count;
            double d6 = schedules.Result.Where( e => e.Status == Enums.Status.Completed && e.DefenseType == Enums.FilePosition.Finals).ToList().Count;
            double d7 = schedules.Result.Where( e => e.Status == Enums.Status.Redefend && e.DefenseType == Enums.FilePosition.Finals).ToList().Count;
            double d8 = schedules.Result.Where( e => e.Status == Enums.Status.AcceptedWithRevisions && e.DefenseType == Enums.FilePosition.Finals).ToList().Count;

            data = new double[] { t5, t6, t7, t8 };
            data1 = new double[] { p5, p6, p7, p8 };
            data2 = new double[] { d5, d6, d7, d8 };
            //double Total = t1+t2+t3+t4+t5+t6+t7;

            //double tPercentage = (t / Total) * 100;
            //double pPercentage = (p / Total) * 100;
            //double dPercentage = (d / Total) * 100;

            labels = new string[] { "Rejected- " +t5, "Completed- " + t6, "Redefend- " + t7, "Rejected With Revisions -" +t8};
            labels1 = new string[] { "Rejected- " + p5, "Completed- " + p6, "Redefend- " + p7, "Rejected With Revisions -" +p8 };
            labels2 = new string[] { "Rejected- " + d5, "Completed- " + d6, "Redefend- " + d7, "Rejected With Revisions -" + d8 }; *@
            await GetScheduless();
            await AppState.NotifyStateChangedAsync();
        }
    }
    private async Task GetScheduless()
    {
        isDataFetch = false;
        Task<List<DefenseVerdictModel>> task = _verdictService.GetDefenseVerdictModel(parameter);
        await task;
        if (task.Status == TaskStatus.RanToCompletion)
        {
            @* Schedules = task.Result.ToList(); *@
            DefenseVerdicts = task.Result;
            double t1 = DefenseVerdicts.Where( e => e.Status == Enums.Status.Rejected && (e.Chapter == Enums.Chapter.Title1 || e.Chapter == Enums.Chapter.Title2 || e.Chapter == Enums.Chapter.Title3)).ToList().Count;
            double t2 = DefenseVerdicts.Where( e => e.Status == Enums.Status.Completed && (e.Chapter == Enums.Chapter.Title1 || e.Chapter == Enums.Chapter.Title2 || e.Chapter == Enums.Chapter.Title3)).ToList().Count;
            double t3= DefenseVerdicts.Where( e => e.Status == Enums.Status.Redefend && (e.Chapter == Enums.Chapter.Title1 || e.Chapter == Enums.Chapter.Title2 || e.Chapter == Enums.Chapter.Title3)).ToList().Count;
            double t4= DefenseVerdicts.Where( e => e.Status == Enums.Status.AcceptedWithRevisions && (e.Chapter == Enums.Chapter.Title1 || e.Chapter == Enums.Chapter.Title2 || e.Chapter == Enums.Chapter.Title3)).ToList().Count;
            double t5= DefenseVerdicts.Where( e => e.Status == Enums.Status.Approved && (e.Chapter == Enums.Chapter.Title1 || e.Chapter == Enums.Chapter.Title2 || e.Chapter == Enums.Chapter.Title3)).ToList().Count;

            double c1 = DefenseVerdicts.Where( e => e.Status == Enums.Status.Rejected && (e.Chapter == Enums.Chapter.Chapter1 || e.Chapter == Enums.Chapter.Chapter2 || e.Chapter == Enums.Chapter.Chapter3)).ToList().Count;
            double c2 = DefenseVerdicts.Where( e => e.Status == Enums.Status.Completed && (e.Chapter == Enums.Chapter.Chapter1 || e.Chapter == Enums.Chapter.Chapter2 || e.Chapter == Enums.Chapter.Chapter3)).ToList().Count;
            double c3= DefenseVerdicts.Where( e => e.Status == Enums.Status.Redefend && (e.Chapter == Enums.Chapter.Chapter1 || e.Chapter == Enums.Chapter.Chapter2 || e.Chapter == Enums.Chapter.Chapter3)).ToList().Count;
            double c4= DefenseVerdicts.Where( e => e.Status == Enums.Status.AcceptedWithRevisions && (e.Chapter == Enums.Chapter.Chapter1 || e.Chapter == Enums.Chapter.Chapter2 || e.Chapter == Enums.Chapter.Chapter3)).ToList().Count;
            double c5= DefenseVerdicts.Where( e => e.Status == Enums.Status.Approved && (e.Chapter == Enums.Chapter.Chapter1 || e.Chapter == Enums.Chapter.Chapter2 || e.Chapter == Enums.Chapter.Chapter3)).ToList().Count;

            double f1 = DefenseVerdicts.Where( e => e.Status == Enums.Status.Rejected && (e.Chapter == Enums.Chapter.Chapter4 || e.Chapter == Enums.Chapter.Chapter5)).ToList().Count;
            double f2 = DefenseVerdicts.Where( e => e.Status == Enums.Status.Completed && (e.Chapter == Enums.Chapter.Chapter4 || e.Chapter == Enums.Chapter.Chapter5)).ToList().Count;
            double f3= DefenseVerdicts.Where( e => e.Status == Enums.Status.Redefend && (e.Chapter == Enums.Chapter.Chapter4 || e.Chapter == Enums.Chapter.Chapter5)).ToList().Count;
            double f4= DefenseVerdicts.Where( e => e.Status == Enums.Status.AcceptedWithRevisions && (e.Chapter == Enums.Chapter.Chapter4 || e.Chapter == Enums.Chapter.Chapter5)).ToList().Count;
            double f5= DefenseVerdicts.Where( e => e.Status == Enums.Status.Approved && (e.Chapter == Enums.Chapter.Chapter4 || e.Chapter == Enums.Chapter.Chapter5)).ToList().Count;

            data = new double[] { t1, t3, t4, t5};
            data1 = new double[] { c3, c4, c5};
            data2 = new double[] { f3, f4, f2};

            labels = new string[] { "Rejected- " +t1, "Redefend- " + t3, "Approved With Revisions -" + t4,"Approved -" +t5  };
            labels1 = new string[] { "Redefend- " + c3, "Approved With Revisions -" +c4 ,"Approved -" +c5};
            labels2 = new string[] { "Redefend- " + f3, "Approved With Revisions -" + f4 ,"Completed- " + f2 };
            await GetMyGroups();
        }
    }
    private async Task GetMyGroups()
    {
        @* Task<IEnumerable<GroupModel>> data = GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Student ?
        GroupService.GetMyGroups(GlobalClass.CurrentUserAccount.UserId, parameter) : GroupService.GetGroups(parameter);
        await data;
        if (data.Status == TaskStatus.RanToCompletion)
        {
            if (GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Student)
            {
                Schedules = Schedules.Where(e => data.Result.Any(m => m.GroupId == e.GroupId)).ToList();
            }
            if (GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
            {
                Schedules = Schedules.Where(e => e.Group.UserId == GlobalClass.CurrentUserAccount.UserId).ToList();
            }
            Task<IEnumerable<GroupModel>> aa = GroupService.GetGroupsWithUsers();
            await aa;
            if (aa.Status == TaskStatus.RanToCompletion)
            {
                Groups = aa.Result.ToList();
                Task<IEnumerable<PanelistModel>> panels = PanelistService.GetPanels();
                await panels;
                if (panels.Status == TaskStatus.RanToCompletion)
                {
                    foreach (ScheduleModel sched in Schedules)
                    {
                        if (sched.Panels != null)
                        {
                            foreach (PanelistModel panel in panels.Result)
                            {
                                if (sched.GroupId == panel.GroupId && sched.ScheduleId == panel.ScheduleId)
                                {
                                    if (!sched.Panels.Any(e => e.Panel.UserId == panel.UserId))
                                        sched.Panels.Add(panel);
                                }
                            }
                        }
                    }
                    isDataFetch = true;
                    StateHasChanged();
                }
            }

        }
        StateHasChanged(); *@
        isDataFetch = true;
    }
}
<style>
    .centered-element {
        position: absolute;
        top: 50%;
        left: 55%;
    }
</style>