@page "/u/dashboard"

@inject IGroupService GroupService
@inject IFileService FileService
@inject IScheduleService ScheduleService
@inject AppState AppState

<div class="d-flex justify-content-center align-items-center">
    <MudPaper Class="pa-2" Elevation="3" Height="88vh" Width="100%">
        @if(GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Student)
        {
            <MudGrid Spacing="2">
                <MudItem xs="3">
                    <MudSelect Value="@Group" 
                    ValueChanged="(GroupModel g)=> GetFiles(g)"
                    Margin="Margin.Dense" Text=""
                    Label="Select Group" HelperText="Required*" Placeholder="Group" AdornmentIcon="@Icons.Material.Filled.People" AdornmentColor="Color.Primary">
                        @foreach (var g in ListGroups.ToList())
                        {
                            <MudSelectItem Value="@g">@g.Groupname</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="5"></MudItem>
                <MudItem xs="4"></MudItem>
                @if(Group.GroupId > 0)
                {
                    <MudItem xs="4">
                        <FileUploadComponent GroupId="Group.GroupId" Position="@Enums.FilePosition.Title" FileModels="@fileModels"/>
                    </MudItem>
                    <MudItem xs="4">
                        <FileUploadComponent GroupId="Group.GroupId" Position="@Enums.FilePosition.PreOral" FileModels="@fileModels"/>
                    </MudItem>
                    <MudItem xs="4">
                        <FileUploadComponent GroupId="Group.GroupId" Position="@Enums.FilePosition.Finals" FileModels="@fileModels"/>
                </MudItem>  
                }
            </MudGrid>
        } else {
            <MudText Class="text-center" Typo="Typo.h2" style="font-size: 30px;">DENFESE PROGRESS</MudText>
            <MudChart ChartType="ChartType.Pie" InputData="@data" @bind-SelectedIndex="Index" InputLabels="@labels" Width="500px" Height="500px" />
        }
    </MudPaper>
</div>
@code
{
    private List<GroupModel> ListGroups = new();
    private GroupModel Group = new();
    bool show,show1 = false;
    List<FileModel> fileModels = new();
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize = 3;
    double[] data = { 77, 25, 20};
    string[] labels = { "Title" , "Pre Oral" , "Final" };
    protected override async Task OnInitializedAsync()
    {
        Task<IEnumerable<GroupModel>> data = GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Student ? 
        GroupService.GetMyGroups(GlobalClass.CurrentUserAccount.UserId) : GroupService.GetGroups();
        await data;
        if(data.Status == TaskStatus.RanToCompletion)
        {
            ListGroups = data.Result.ToList();
            Group = ListGroups.FirstOrDefault() ?? new();
            await GetFiles(Group);
        }
    }
    private async Task GetFiles(GroupModel groupModel)
    {
        Group = groupModel;
        Task<IEnumerable<FileModel>> task = FileService.GetFiles();
        await task;
        if(task.Status == TaskStatus.RanToCompletion)
        {
            fileModels = task.Result.ToList()?? new();
            await Task.Delay(1000);
            await GetSchedules();
        }
        StateHasChanged();
    }
    private async Task GetSchedules()
    {
        Task<IEnumerable<ScheduleModel>> schedules = ScheduleService.GetSchedules();
        await schedules;
        if(schedules.Status == TaskStatus.RanToCompletion)
        {
            double t = schedules.Result.Where( e => e.Status == Enums.Status.InProgress && e.DefenseType == Enums.FilePosition.Title).ToList().Count;
            double p = schedules.Result.Where( e => e.Status == Enums.Status.InProgress && e.DefenseType == Enums.FilePosition.PreOral).ToList().Count;
            double d = schedules.Result.Where( e => e.Status == Enums.Status.InProgress && e.DefenseType == Enums.FilePosition.Finals).ToList().Count;
            data = new double[] { t, p , d};
            Console.WriteLine(t);
            await AppState.NotifyStateChangedAsync();
        }
    }
}