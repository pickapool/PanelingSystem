@page "/u/dashboard"

@inject IGroupService GroupService
@inject IFileService FileService
@inject IScheduleService ScheduleService
@inject AppState AppState

<div class="d-flex justify-content-center align-items-center">
        @if(GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Student)
        {
            <MudPaper Class="pa-2" Elevation="3" Height="88vh" Width="100%">
            <MudGrid Spacing="2">
                <MudItem xs="3">
                    <MudSelect Value="@Group" 
                    ValueChanged="(GroupModel g)=> GetFiles(g)"
                    Margin="Margin.Dense" Text=""
                    Label="Select Group" HelperText="Required*" Placeholder="Group" AdornmentIcon="@Icons.Material.Filled.People" AdornmentColor="Color.Primary">
                        @foreach (var g in ListGroups.ToList())
                        {
                            <MudSelectItem Value="@g">@g.Groupname</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="5"></MudItem>
                <MudItem xs="4"></MudItem>
                @if(Group.GroupId > 0)
                {
                    <MudItem xs="4">
                        <FileUploadComponent GroupId="Group.GroupId" Position="@Enums.FilePosition.Title" FileModels="@fileModels"/>
                    </MudItem>
                    <MudItem xs="4">
                        <FileUploadComponent GroupId="Group.GroupId" Position="@Enums.FilePosition.PreOral" FileModels="@fileModels"/>
                    </MudItem>
                    <MudItem xs="4">
                        <FileUploadComponent GroupId="Group.GroupId" Position="@Enums.FilePosition.Finals" FileModels="@fileModels"/>
                </MudItem>  
                }
            </MudGrid>
            </MudPaper>
        } else {
            <MudPaper Class="pa-2 d-flex flex-row justify-content-center align-items-center" Elevation="3" Height="88vh" Width="100%">
                <div>
                    <MudText Class="text-center" Typo="Typo.h2" style="font-size: 30px;">TITLE DEFENSE</MudText>
                    <MudChart ChartType="ChartType.Pie" InputData="@data" @bind-SelectedIndex="Index" InputLabels="@labels" Width="300px" Height="300px"/>
                </div>
                <div>
                    <MudText Class="text-center" Typo="Typo.h2" style="font-size: 30px;">PRE ORAL DEFENSE</MudText>
                    <MudChart ChartType="ChartType.Pie" InputData="@data1" @bind-SelectedIndex="Index" InputLabels="@labels1" Width="300px" Height="300px" />
                </div>
                <div>
                    <MudText Class="text-center" Typo="Typo.h2" style="font-size: 30px;">FINAL DEFENSE</MudText>
                    <MudChart ChartType="ChartType.Pie" InputData="@data2" @bind-SelectedIndex="Index" InputLabels="@labels2" Width="300px" Height="300px" />
                </div>
            </MudPaper>
        }
</div>
@code
{
    private List<GroupModel> ListGroups = new();
    private GroupModel Group = new();
    bool show,show1 = false;
    List<FileModel> fileModels = new();
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize = 3;
    double[] data = { 77, 25, 20};
    string[] labels = { "Title" , "Pre Oral" , "Final" };
    double[] data1 = { 77, 25, 20};
    string[] labels1 = { "Title" , "Pre Oral" , "Final" };
    double[] data2 = { 77, 25, 20};
    string[] labels2 = { "Title" , "Pre Oral" , "Final" };

    protected override async Task OnInitializedAsync()
    {
        Task<IEnumerable<GroupModel>> data = GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Student ? 
        GroupService.GetMyGroups(GlobalClass.CurrentUserAccount.UserId) : GroupService.GetGroups();
        await data;
        if(data.Status == TaskStatus.RanToCompletion)
        {
            ListGroups = data.Result.ToList();
            Group = ListGroups.FirstOrDefault() ?? new();
            await GetFiles(Group);
        }
    }
    private async Task GetFiles(GroupModel groupModel)
    {
        Group = groupModel;
        Task<IEnumerable<FileModel>> task = FileService.GetFiles();
        await task;
        if(task.Status == TaskStatus.RanToCompletion)
        {
            fileModels = task.Result.ToList()?? new();
            await Task.Delay(1000);
            await GetSchedules();
        }
        StateHasChanged();
    }
    private async Task GetSchedules()
    {
        Task<IEnumerable<ScheduleModel>> schedules = ScheduleService.GetSchedules();
        await schedules;
        if(schedules.Status == TaskStatus.RanToCompletion)
        {
            double t1 = schedules.Result.Where( e => e.Status == Enums.Status.InProgress && e.DefenseType == Enums.FilePosition.Title).ToList().Count;
            double t2 = schedules.Result.Where( e => e.Status == Enums.Status.Failed && e.DefenseType == Enums.FilePosition.Title).ToList().Count;
            double t3 = schedules.Result.Where( e => e.Status == Enums.Status.Success && e.DefenseType == Enums.FilePosition.Title).ToList().Count;
            double t4 = schedules.Result.Where( e => e.Status == Enums.Status.Pending && e.DefenseType == Enums.FilePosition.Title).ToList().Count;
            double t5 = schedules.Result.Where( e => e.Status == Enums.Status.Rejected && e.DefenseType == Enums.FilePosition.Title).ToList().Count;
            double t6 = schedules.Result.Where( e => e.Status == Enums.Status.Completed && e.DefenseType == Enums.FilePosition.Title).ToList().Count;
            double t7= schedules.Result.Where( e => e.Status == Enums.Status.Redefend && e.DefenseType == Enums.FilePosition.Title).ToList().Count;

            double p1 = schedules.Result.Where( e => e.Status == Enums.Status.InProgress && e.DefenseType == Enums.FilePosition.PreOral).ToList().Count;
            double p2 = schedules.Result.Where( e => e.Status == Enums.Status.Failed && e.DefenseType == Enums.FilePosition.PreOral).ToList().Count;
            double p3 = schedules.Result.Where( e => e.Status == Enums.Status.Success && e.DefenseType == Enums.FilePosition.PreOral).ToList().Count;
            double p4 = schedules.Result.Where( e => e.Status == Enums.Status.Pending && e.DefenseType == Enums.FilePosition.PreOral).ToList().Count;
            double p5 = schedules.Result.Where( e => e.Status == Enums.Status.Rejected && e.DefenseType == Enums.FilePosition.PreOral).ToList().Count;
            double p6 = schedules.Result.Where( e => e.Status == Enums.Status.Completed && e.DefenseType == Enums.FilePosition.PreOral).ToList().Count;
            double p7 = schedules.Result.Where( e => e.Status == Enums.Status.Redefend && e.DefenseType == Enums.FilePosition.PreOral).ToList().Count;

            double d1 = schedules.Result.Where( e => e.Status == Enums.Status.InProgress && e.DefenseType == Enums.FilePosition.Finals).ToList().Count;
            double d2 = schedules.Result.Where( e => e.Status == Enums.Status.Failed && e.DefenseType == Enums.FilePosition.Finals).ToList().Count;
            double d3 = schedules.Result.Where( e => e.Status == Enums.Status.Success && e.DefenseType == Enums.FilePosition.Finals).ToList().Count;
            double d4 = schedules.Result.Where( e => e.Status == Enums.Status.Pending && e.DefenseType == Enums.FilePosition.Finals).ToList().Count;
            double d5 = schedules.Result.Where( e => e.Status == Enums.Status.Rejected && e.DefenseType == Enums.FilePosition.Finals).ToList().Count;
            double d6 = schedules.Result.Where( e => e.Status == Enums.Status.Completed && e.DefenseType == Enums.FilePosition.Finals).ToList().Count;
            double d7 = schedules.Result.Where( e => e.Status == Enums.Status.Redefend && e.DefenseType == Enums.FilePosition.Finals).ToList().Count;

            data = new double[] { t1, t2, t3, t4, t5, t6, t7 };
            data1 = new double[] { p1, p2, p3, p4, p5, p6, p7 };
            data2 = new double[] { d1, d2, d3, d4, d5, d6, d7 };
            //double Total = t1+t2+t3+t4+t5+t6+t7;

            //double tPercentage = (t / Total) * 100;
            //double pPercentage = (p / Total) * 100;
            //double dPercentage = (d / Total) * 100;

            labels = new string[]{ "In Progress- " + t1 ,"Failed- " +t2 , "Success- " +t3, "Pending- " + t4, "Rejected- " +t5, "Completed- " + t6, "Redefend- " + t7};
            labels1 = new string[] { "In Progress- " + p1, "Failed- " + p2, "Success- " + p3, "Pending- " + p4, "Rejected- " + p5, "Completed- " + p6, "Redefend- " + p7 };
            labels2 = new string[] { "In Progress- " + d1, "Failed- " + d2, "Success- " + d3, "Pending- " + d4, "Rejected- " + d5, "Completed- " + d6, "Redefend- " + d7 };
            
            await AppState.NotifyStateChangedAsync();
        }
    }
}