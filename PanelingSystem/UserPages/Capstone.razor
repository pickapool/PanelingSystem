@page "/u/capstone"

@inject IGroupService GroupService
@inject ICapstoneFileService CapstoneFileService
@inject ICommentService CommentService

<div class="d-flex flex-column justify-content-center align-items-center">
    <MudGrid Spacing="1">
        <MudItem xs="9">
            <MudPaper Elevation="3" Height="88vh" Width="100%">
                <div class="d-flex flex-column pa-2">
                    <MudGrid>
                        <MudItem xs="4">
                            <MudSelect Value="@Group" style="width: 30%;"
                                ValueChanged="(GroupModel g)=> GetFiles(g)"
                                Margin="Margin.Dense" Text=""
                                    Label="Select Group" HelperText="Required*" Placeholder="Group" AdornmentIcon="@Icons.Material.Filled.People" AdornmentColor="Color.Primary">
                                    @foreach (var g in ListGroups.ToList())
                                    {
                                        <MudSelectItem Value="@g">@g.Groupname</MudSelectItem>
                                    }
                            </MudSelect>
                        </MudItem>
                    </MudGrid>
                    <div class="pa-2 d-flex flex-column gap-3 justify-content-center caps">
                        <ChapterComponent OnClick="()=> GetComments(Enums.Chapter.Chapter1)" Title="CHAPTER 1" Chapter="Enums.Chapter.Chapter1" ListChapters="ListChapters" GroupId="Group.GroupId"/>
                        <ChapterComponent OnClick="()=> GetComments(Enums.Chapter.Chapter2)" Title="CHAPTER 2" Chapter="Enums.Chapter.Chapter2" ListChapters="ListChapters" GroupId="Group.GroupId"/>
                        <ChapterComponent OnClick="()=> GetComments(Enums.Chapter.Chapter3)" Title="CHAPTER 3" Chapter="Enums.Chapter.Chapter3" ListChapters="ListChapters" GroupId="Group.GroupId"/>
                        <ChapterComponent OnClick="()=> GetComments(Enums.Chapter.Chapter4)" Title="CHAPTER 4" Chapter="Enums.Chapter.Chapter4" ListChapters="ListChapters" GroupId="Group.GroupId"/>
                        <ChapterComponent OnClick="()=> GetComments(Enums.Chapter.Chapter5)" Title="CHAPTER 5" Chapter="Enums.Chapter.Chapter5" ListChapters="ListChapters" GroupId="Group.GroupId"/>
                    </div>
                </div>
                
            </MudPaper>
        </MudItem>
        <MudItem xs="3">
            <MudPaper Class="pa-2" Elevation="3" Height="88vh" Width="100%">
                <div class="d-flex flex-column justify-content-between gap-2" style="height: 100%;">
                    <div class="d-flex flex-column gap-2">
                        <MudText Typo="Typo.caption">Comments</MudText>
                        <MudDivider/>
                        @foreach(CommentModel comment in ListComments)
                        {
                            <CommentComponent Comment="comment" OnChanged="()=> GetComments(chapter)"/>
                        }
                    </div>
                    <div>
                    @if(GlobalClass.CurrentUserAccount.AccountType != Enums.AccountType.Student)
                    {
                        <MudTextField @bind-Value="comment" HelperText="Comment" AdornmentIcon="@Icons.Material.Filled.Send" 
                            Variant="MudBlazor.Variant.Text" Adornment="Adornment.End"  Margin="Margin.Dense" OnAdornmentClick="AddComment"/>
                    }
                    </div>
                </div>
            </MudPaper>
        </MudItem>
    </MudGrid>
    
</div>
@code
{
    private List<GroupModel> ListGroups = new();
    private GroupModel Group = new();
    private List<CapstoneFileModel> ListChapters = new();
    private List<CommentModel> ListComments = new();
    private string comment = string.Empty;
    private Enums.Chapter chapter;
    protected override async Task OnInitializedAsync()
    {
        Task<IEnumerable<GroupModel>> data = GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Student?
            GroupService.GetMyGroups(GlobalClass.CurrentUserAccount.UserId) : GroupService.GetGroups();
        await data;
        if(data.Status == TaskStatus.RanToCompletion)
        {
            ListGroups = data.Result.ToList();
            if(GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Adviser)
            {
                ListGroups = ListGroups.Where(e => e.UserId == GlobalClass.CurrentUserAccount.UserId).ToList();
            }
            Group = ListGroups.FirstOrDefault() ?? new();
            await GetFiles(Group);
        }
    }
    private async Task GetFiles(GroupModel groupModel)
    {
        Group = groupModel;
        Task<IEnumerable<CapstoneFileModel>> task = CapstoneFileService.GetCapstoneFiles();
        await task;
        if(task.Status == TaskStatus.RanToCompletion)
        {
            ListChapters = task.Result.ToList();
            await GetComments(Enums.Chapter.Chapter1);
        }
    }
    private async Task AddComment()
    {
        CommentModel comments = new();
        comments.Comment = comment;
        comments.Chapter = chapter;
        comments.UserId = GlobalClass.CurrentUserAccount.UserId;
        comments.GrouId = Group.GroupId;
        comments.CommentDate = DateTime.Now;
        Task t = CommentService.PostCommentModel(comments);
        await t;
        if(t.Status == TaskStatus.RanToCompletion)
        {
            comment = string.Empty;
            await GetComments(chapter);
        }
    }
    private async Task GetComments(Enums.Chapter chap)
    {
        Console.WriteLine("asd");
        chapter = chap;
        Task<IEnumerable<CommentModel>> c = CommentService.GetComments(chap);
        await c;
        if(c.Status == TaskStatus.RanToCompletion){
            ListComments  = c.Result.Where( e => e.GrouId == Group.GroupId).ToList();
        }
        StateHasChanged();
    }
}
<style>
    .capstone
    {
        cursor: pointer;
    }
</style>
