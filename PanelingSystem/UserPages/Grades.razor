@page "/u/grades"

@inject IMemberService MemberService
@inject IGroupService GroupService
@inject IGradeService GradeService
@inject AppState AppState
@inject ISnackbar SnackBar
@inject ICapstoneFileService CapstoneFileService
@inject IJSRuntime JSRuntime

<div class="d-flex justify-content-center align-items-center">
    @if(IsDataFetch)
    {
        <MudGrid Spacing="2">
            <MudItem xs="9">
                <MudPaper Class="pa-2" Elevation="3" Height="88vh" Width="100%">
                    <MudGrid Spacing="2">
                        <MudItem xs="4">
                            <MudSelect Value="@Group" 
                            ValueChanged="(GroupModel g)=> SetGroup(g)"
                            Margin="Margin.Dense" Text=""
                            Label="Select Group" HelperText="Required*" Placeholder="Group" AdornmentIcon="@Icons.Material.Filled.People" AdornmentColor="Color.Primary">
                                @foreach (var g in ListGroups.ToList())
                                {
                                    <MudSelectItem Value="@g">@g.Groupname</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="4">
                            <MudSelect Value="@Section" 
                            ValueChanged="(GroupModel g)=> SetSection(g)"
                            Margin="Margin.Dense" Text=""
                            Label="Select Section" HelperText="Required*" Placeholder="Group" AdornmentIcon="@Icons.Material.Filled.People" AdornmentColor="Color.Primary">
                                @foreach (var g in ListGroups.ToList().DistinctBy(e => e.Section).ToList())
                                {
                                    <MudSelectItem Value="@g">@g.Section</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="4"></MudItem>
                        @* <MudItem xs="12">
                        @foreach(MembersModel member in GroupMembers)
                        {
                            <GradesComponents @bind-Average="@member.Average" Member="member" Grades="ListGrades" GroupId="Group.GroupId" OnGradeChange="()=> NotifyChanged()"/>
                        }
                    </MudItem> *@
                        <MudItem xs=12>
                            <MudTable Items="GroupMembers"  Class="pa-2 overflow-auto" Elevation="3" Height="calc(100vh - 230px)" Width="100%">
                                <ColGroup>
                                    <col style="width: 20%;"/>
                                    <col/>
                                    <col/>
                                    <col/>
                                    <col  />
                                    <col />
                                    <col />
                                    <col  />
                                    <col />
                                    <col />
                                    <col style="width: 1%;"/>
                                </ColGroup>
                                <HeaderContent>
                                    <MudTh>Student Name</MudTh>
                                    <MudTh>Course</MudTh>
                                    <MudTh>Year</MudTh>
                                    <MudTh>Section</MudTh>
                                    <MudTh Class="text-center">Title Defense Grade</MudTh>
                                    <MudTh></MudTh>
                                    <MudTh Class="text-center">Pre Oral Defense Grade</MudTh>
                                    <MudTh></MudTh>
                                    <MudTh Class="text-center">Final Defense Grade</MudTh>
                                    <MudTh></MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd>@context.Student.Name</MudTd>
                                    <MudTd>@context.Group.Program</MudTd>
                                    <MudTd>@context.Group.Year</MudTd>
                                    <MudTd>@context.Group.Section</MudTd>
                                    <MudTd>
                                        <MudTextField @bind-Value="@context.TitleAverage" Variant="MudBlazor.Variant.Text" 
                                        style="width: 100px;"
                                        Margin="Margin.Dense"
                                        Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.FolderCopy" OnAdornmentClick="()=> OpenFiles(Enums.Chapter.Title1)"
                                        Disabled="@( 
                                                GlobalClass.CurrentUserAccount.AccountType != Enums.AccountType.Panelist_Adviser)" />
                                    </MudTd>
                                    <MudTd>
                                        <MudTooltip Text="Show Panel Grades">
                                            <MudIconButton OnClick="()=> ShowGrades(context, Enums.FilePosition.Title)" Icon="@Icons.Material.Filled.RateReview" Size="Size.Small">
                                            </MudIconButton>
                                            <MudPopover Open="@context.OpenGrade1" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                                                <div class="d-flex flex-column pa-3 gap-2" style="width: 200px; height: auto;">
                                                    <span>Final Grades</span>
                                                    <MudDivider/>
                                                    @foreach(var g in context.PanelGrades) {
                                                        <div class="d-flex justify-space-between">
                                                            <span>@g.UserAccount?.Name</span>
                                                            <span>@g.Grade</span>
                                                        </div>
                                                    }
                                                    <MudDivider></MudDivider>
                                                    <div class="d-flex justify-space-between">
                                                        <span>Average </span>
                                                        <span>@((context.PanelGrades.Sum( e => e.Grade) / context.PanelGrades.Count).ToString("N2"))</span>
                                                    </div>
                                                </div>
                                            </MudPopover>
                                        </MudTooltip>

                                    </MudTd>
                                    <MudTd>
                                        <MudTextField @bind-Value="@context.PreOralAverage" Variant="MudBlazor.Variant.Text" Margin="Margin.Dense"
                                        style="width: 100px;"
                                        Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.FolderCopy" OnAdornmentClick="()=> OpenFiles(Enums.Chapter.Chapter1)"
                                        Disabled="@(GlobalClass.CurrentUserAccount.AccountType != Enums.AccountType.Panelist_Adviser)" />
                                    </MudTd>
                                    <MudTd>
                                        <MudTooltip Text="Show Panel Grades">
                                            <MudIconButton OnClick="()=> ShowGrades(context, Enums.FilePosition.PreOral)" Icon="@Icons.Material.Filled.RateReview" Size="Size.Small">
                                            </MudIconButton>
                                            <MudPopover Open="@context.OpenGrade2" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                                                <div class="d-flex flex-column pa-3 gap-2" style="width: 200px; height: auto;">
                                                    <span>Final Grades</span>
                                                    <MudDivider/>
                                                    @foreach(var g in context.PanelGrades) {
                                                        <div class="d-flex justify-space-between">
                                                            <span>@g.UserAccount?.Name</span>
                                                            <span>@g.Grade</span>
                                                        </div>
                                                    }
                                                    <MudDivider></MudDivider>
                                                    <div class="d-flex justify-space-between">
                                                        <span>Average </span>
                                                        <span>@((context.PanelGrades.Sum( e => e.Grade) / context.PanelGrades.Count).ToString("N2"))</span>
                                                    </div>
                                                </div>
                                            </MudPopover>
                                        </MudTooltip>

                                    </MudTd>
                                    <MudTd>
                                        <MudTextField @bind-Value="@context.FinalAverage" Variant="MudBlazor.Variant.Text" Margin="Margin.Dense"
                                        style="width: 100px;"
                                        Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.FolderCopy" OnAdornmentClick="()=> OpenFiles(Enums.Chapter.Chapter4)"
                                        Disabled="@(GlobalClass.CurrentUserAccount.AccountType != Enums.AccountType.Panelist_Adviser)" />
                                    </MudTd>
                                    <MudTd>
                                        <MudTooltip Text="Show Panel Grades">
                                            <MudIconButton OnClick="()=> ShowGrades(context, Enums.FilePosition.Finals)" Icon="@Icons.Material.Filled.RateReview" Size="Size.Small">
                                            </MudIconButton>
                                            <MudPopover Open="@context.OpenGrade3" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                                                <div class="d-flex flex-column pa-3 gap-2" style="width: 200px; height: auto;">
                                                    <span>Final Grades</span>
                                                    <MudDivider/>
                                                    @foreach(var g in context.PanelGrades) {
                                                        <div class="d-flex justify-space-between">
                                                            <span>@g.UserAccount?.Name</span>
                                                            <span>@g.Grade</span>
                                                        </div>
                                                    }
                                                    <MudDivider></MudDivider>
                                                    <div class="d-flex justify-space-between">
                                                        <span>Average </span>
                                                        <span>@((context.PanelGrades.Sum( e => e.Grade) / context.PanelGrades.Count).ToString("N2"))</span>
                                                    </div>
                                                </div>
                                            </MudPopover>
                                        </MudTooltip>

                                    </MudTd>
                                    <MudTd>
                                        <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Info" OnClick="()=> SaveMember(context)" Size="Size.Small"
                                        Disabled="@( GlobalClass.CurrentUserAccount.AccountType != Enums.AccountType.Panelist_Adviser)">Update</MudButton>
                                    </MudTd>
                                </RowTemplate>
                                <ChildRowContent>
                                    <td colspan="8">
                                        @if(OpenFile)
                                        {
                                            if(curentChapter == Enums.Chapter.Title1) {
                                                <MudButton OnClick="()=> Download(context.Group.Title1)" Variant="MudBlazor.Variant.Text" EndIcon="@Icons.Material.Filled.Download">Title 1</MudButton>
                                                <MudButton OnClick="()=> Download(context.Group.Title2)" Variant="MudBlazor.Variant.Text" EndIcon="@Icons.Material.Filled.Download">Title 2</MudButton>
                                                <MudButton OnClick="()=> Download(context.Group.Title3)" Variant="MudBlazor.Variant.Text" EndIcon="@Icons.Material.Filled.Download">Title 3</MudButton>
                                            } else if(curentChapter == Enums.Chapter.Chapter1) {
                                                <MudButton OnClick="()=> Download(context.Group.Chapter1)" Variant="MudBlazor.Variant.Text" EndIcon="@Icons.Material.Filled.Download">Chapter 1</MudButton>
                                                <MudButton OnClick="()=> Download(context.Group.Chapter2)" Variant="MudBlazor.Variant.Text" EndIcon="@Icons.Material.Filled.Download">Chapter 2</MudButton>
                                                <MudButton OnClick="()=> Download(context.Group.Chapter3)" Variant="MudBlazor.Variant.Text" EndIcon="@Icons.Material.Filled.Download">Chapter 3</MudButton>
                                            } else if(curentChapter == Enums.Chapter.Chapter4) {
                                                <MudButton OnClick="()=> Download(context.Group.Chapter4)" Variant="MudBlazor.Variant.Text" EndIcon="@Icons.Material.Filled.Download">Chapter 4</MudButton>
                                                <MudButton OnClick="()=> Download(context.Group.Chapter5)" Variant="MudBlazor.Variant.Text" EndIcon="@Icons.Material.Filled.Download">Chapter 5</MudButton>
                                            }
                                        }
                                    </td>
                                </ChildRowContent>
                            </MudTable>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
            <MudItem xs="3">
                <MudPaper Class="pa-2" Elevation="3" Height="88vh" Width="100%">
                    <div class="d-flex flex-column align-items-center">
                        <MudText Typo="Typo.h2">GPA @((double.IsNaN(GPA) == true ? 0 : GPA).ToString("N2")) %</MudText>
                        <MudChart ChartType="ChartType.Donut" Width="250px" Height="250px" @bind-SelectedIndex="Index" InputData="@data" InputLabels="@labels"></MudChart>
                    </div>
                </MudPaper>
            </MudItem>
        </MudGrid>
    } else {
        <MudSkeleton Height="100vh" Width="100%"></MudSkeleton>
    }
</div>

@code
{
    private GroupModel Group = new();
    private GroupModel Section = new();
    private List<MembersModel> GroupMembers = new();
    private List<GroupModel> ListGroups = new();
    private List<GradeModel> ListGrades = new();
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize = 2;
    public double[] data = { GPA, GPA - 100 };
    public string[] labels = { "TOTAL AVERAGE",""};
    bool IsDataFetch = false;
    private static double GPA = 0.00;
    bool OpenFile = false;
    Enums.Chapter curentChapter;
    protected override async Task OnInitializedAsync()
    {
        await GetGroups();   
    }
    private async Task GetGroups()
    {
        IsDataFetch = false;
        Task<IEnumerable<GroupModel>> data = 
        GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Student ? 
        GroupService.GetMyGroups(GlobalClass.CurrentUserAccount.UserId) : GroupService.GetGroups();
        await data;
        if(data.Status == TaskStatus.RanToCompletion)
        {
            ListGroups = data.Result.ToList();
            if (GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
            {
                ListGroups = ListGroups.Where(e => e.UserId == GlobalClass.CurrentUserAccount.UserId).ToList();
            }
            foreach (var item in GroupMembers)
            {
                item.Group.Chapter1 = await CapstoneFileService.GetCapstoneFilesWithGroup2(item.GroupId, Enums.Chapter.Chapter1);
                item.Group.Chapter2 = await CapstoneFileService.GetCapstoneFilesWithGroup2(item.GroupId, Enums.Chapter.Chapter2);
                item.Group.Chapter3 = await CapstoneFileService.GetCapstoneFilesWithGroup2(item.GroupId, Enums.Chapter.Chapter3);
                item.Group.Chapter4 = await CapstoneFileService.GetCapstoneFilesWithGroup2(item.GroupId, Enums.Chapter.Chapter4);
                item.Group.Chapter5 = await CapstoneFileService.GetCapstoneFilesWithGroup2(item.GroupId, Enums.Chapter.Chapter5);
                item.Group.Title1 = await CapstoneFileService.GetCapstoneFilesWithGroup2(item.GroupId, Enums.Chapter.Title1);
                item.Group.Title2 = await CapstoneFileService.GetCapstoneFilesWithGroup2(item.GroupId, Enums.Chapter.Title2);
                item.Group.Title3 = await CapstoneFileService.GetCapstoneFilesWithGroup2(item.GroupId, Enums.Chapter.Title3);
            }

            foreach(var item in ListGroups) {
                foreach(var g in item.Members) {
                    g.PanelGrades = await _panelGradeService.GetMemeberGrades(g.MemberId);
                }
            }

            Group = ListGroups.FirstOrDefault() ?? new();
            await SetGroup(Group);
        } 
    }
    private async Task Download(CapstoneFileModel CapstoneFile)
    {
        if(CapstoneFile.File == null)
        {
            Extensions.ShowAlert("No file has been found.", MudBlazor.Variant.Filled, SnackBar, Severity.Error);
            return;
        }
        if(CapstoneFile.File.Length <= 0)
        {
            Extensions.ShowAlert("No file has been found.", MudBlazor.Variant.Filled, SnackBar, Severity.Error);
            return;
        }
        await Extensions.Download(CapstoneFile.File, CapstoneFile.FileName, JSRuntime);
    }
    private async Task OpenFiles(Enums.Chapter chapter) {
        if(!OpenFile)
            OpenFile = !OpenFile;
        curentChapter = chapter;
    }
    private async Task SetGroup(GroupModel groupModel)
    {
        Group = groupModel;
        await GetMembers();
    }
    private async Task SetSection(GroupModel groupModel)
    {
        Section = groupModel;
        GroupMembers = GroupMembers.Where(e => e.Group.Section == Section.Section).ToList();
    }

    private async Task GetMembers()
    {
        Task<IEnumerable<MembersModel>> t =  MemberService.GetMyGroupMembers(Group.GroupId);
        await t;
        if(t.Status == TaskStatus.RanToCompletion)
        {
            GroupMembers = t.Result.ToList();
            Task<IEnumerable<GradeModel>> list = GradeService.GetGradeModel();
            await list;
            if(list.Status == TaskStatus.RanToCompletion)
            {
                ListGrades = list.Result.ToList();
                await NotifyChanged();
                GPA = Extensions.CalculateGPA(GroupMembers);
                IsDataFetch = true;
                data = new double[] { GPA, GPA - 100 };
                await AppState.NotifyStateChangedAsync();
            }
        }
        StateHasChanged();
    }
    private async Task NotifyChanged()
    {
        //await OnInitializedAsync();
        foreach(var member in GroupMembers.Where( e => e.GroupId == Group.GroupId))
        {
            member.Average = ListGrades.Where(e => e.UserId == member.UserId && e.GroupId == Group.GroupId)
                    .GroupBy(g => g.GradedById)
                    .Select(g => g.OrderByDescending(g => g.GradeId).FirstOrDefault())
                    .ToList().Sum(s => s.Grade) / ListGrades.Where(e => e.UserId == member.UserId && e.GroupId == Group.GroupId)
                    .GroupBy(g => g.GradedById)
                    .Select(g => g.OrderByDescending(g => g.GradeId).FirstOrDefault())
                    .ToList().Count;
        }
        GPA = GPA = Extensions.CalculateGPA(GroupMembers);
        @* GPA = (ListGrades.Where( e => e.GroupId == Group.GroupId).ToList().Sum( e => e.Grade) / GroupMembers.Count) ; *@
        data = new double[] { GPA, GPA - 100 };
        await AppState.NotifyStateChangedAsync();
    }
    private async Task SaveMember(MembersModel member) 
    {
        Task task = MemberService.PutMembersModel(member.MemberId, member);
        await task;
        if(task.Status == TaskStatus.RanToCompletion)
        {
            Extensions.ShowAlert("Member has been updated.", MudBlazor.Variant.Filled, SnackBar, Severity.Success);
            await NotifyChanged();
        }
    }
    private async Task ShowGrades(MembersModel member, Enums.FilePosition defenseType) {
       // member.PanelGrades = await _panelGradeService.GetMemeberGrades(member.MemberId, defenseType);
        if(defenseType == Enums.FilePosition.Title) {
            member.OpenGrade1 = !member.OpenGrade1;
            member.OpenGrade2 = false;
            member.OpenGrade3 = false;
        } else if(defenseType == Enums.FilePosition.PreOral){
            member.OpenGrade2 = !member.OpenGrade2;

            member.OpenGrade1 = false;
            member.OpenGrade3 = false;
        } else {
            member.OpenGrade3 = !member.OpenGrade3;

            member.OpenGrade1 = false;
            member.OpenGrade2 = false;
        }
        GroupMembers.ForEach(e =>
        {
            if (member.MemberId != e.MemberId)
            {
                e.OpenGrade1 = false;
                e.OpenGrade2 = false;
                e.OpenGrade3 = false;
            }
        });

        StateHasChanged();
    }
}
<style>
    .mud-input > input.mud-input-root, div.mud-input-slot.mud-input-root {
        text-align: center;
    }
</style>