@page "/u/grades"

@inject IMemberService MemberService
@inject IGroupService GroupService
@inject IGradeService GradeService
@inject AppState AppState

<div class="d-flex justify-content-center align-items-center">
    @if(IsDataFetch)
    {
    <MudGrid Spacing="2">
        <MudItem xs="8">
            <MudPaper Class="pa-2" Elevation="3" Height="88vh" Width="100%">
                <MudGrid Spacing="2">
                    <MudItem xs="4">
                        <MudSelect Value="@Group" 
                            ValueChanged="(GroupModel g)=> SetGroup(g)"
                            Margin="Margin.Dense" Text=""
                            Label="Select Group" HelperText="Required*" Placeholder="Group" AdornmentIcon="@Icons.Material.Filled.People" AdornmentColor="Color.Primary">
                                @foreach (var g in ListGroups.ToList())
                                {
                                    <MudSelectItem Value="@g">@g.Groupname</MudSelectItem>
                                }
                            </MudSelect>
                    </MudItem>
                    <MudItem xs="4"></MudItem>
                    <MudItem xs="4"></MudItem>
                    <MudItem xs="12">
                        @foreach(MembersModel member in GroupMembers)
                        {
                            <GradesComponents @bind-Average="@member.Average" Member="member" Grades="ListGrades" GroupId="Group.GroupId" OnGradeChange="()=> NotifyChanged()"/>
                        }
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
        <MudItem xs="4">
            <MudPaper Class="pa-2" Elevation="3" Height="88vh" Width="100%">
                <div class="d-flex flex-column align-items-center">
                    <MudText Typo="Typo.h2">GPA @((double.IsNaN(GPA) == true ? 0 : GPA).ToString("N2")) %</MudText>
                    <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" @bind-SelectedIndex="Index" InputData="@data" InputLabels="@labels"></MudChart>
                </div>
            </MudPaper>
        </MudItem>
    </MudGrid>
    } else {
        <MudSkeleton Height="100vh" Width="100%"></MudSkeleton>
    }
</div>

@code
{
    private GroupModel Group = new();
    private List<MembersModel> GroupMembers = new();
    private List<GroupModel> ListGroups = new();
    private List<GradeModel> ListGrades = new();
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize = 2;
    public double[] data = { GPA, GPA - 100 };
    public string[] labels = { "TOTAL AVERAGE",""};
    bool IsDataFetch = false;
    private static double GPA = 0.00;
    protected override async Task OnInitializedAsync()
    {
        await GetGroups();   
    }
    private async Task GetGroups()
    {
        IsDataFetch = false;
        Task<IEnumerable<GroupModel>> data = 
        GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Student ? 
        GroupService.GetMyGroups(GlobalClass.CurrentUserAccount.UserId) : GroupService.GetGroups();
        await data;
        if(data.Status == TaskStatus.RanToCompletion)
        {
            ListGroups = data.Result.ToList();
            if (GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
            {
                ListGroups = ListGroups.Where(e => e.UserId == GlobalClass.CurrentUserAccount.UserId).ToList();
            }
            Group = ListGroups.FirstOrDefault() ?? new();
            await SetGroup(Group);
        } 
    }
    private async Task SetGroup(GroupModel groupModel)
    {
        Group = groupModel;
        await GetMembers();
    }
    private async Task GetMembers()
    {
        Task<IEnumerable<MembersModel>> t =  MemberService.GetMyGroupMembers(Group.GroupId);
        await t;
        if(t.Status == TaskStatus.RanToCompletion)
        {
            GroupMembers = t.Result.ToList();
            Task<IEnumerable<GradeModel>> list = GradeService.GetGradeModel();
            await list;
            if(list.Status == TaskStatus.RanToCompletion)
            {
                ListGrades = list.Result.ToList();
                await NotifyChanged();
                GPA = GroupMembers.Where( e => e.GroupId == Group.GroupId).ToList().Sum(e => e.Average) / GroupMembers.Where( e => e.GroupId == Group.GroupId).ToList().Count;
                IsDataFetch = true;
                data = new double[] { GPA, GPA - 100 };
                await AppState.NotifyStateChangedAsync();
            }
        }
        StateHasChanged();
    }
    private async Task NotifyChanged()
    {
        //await OnInitializedAsync();
        foreach(var member in GroupMembers.Where( e => e.GroupId == Group.GroupId))
        {
            member.Average = ListGrades.Where(e => e.UserId == member.UserId && e.GroupId == Group.GroupId)
                    .GroupBy(g => g.GradedById)
                    .Select(g => g.OrderByDescending(g => g.GradeId).FirstOrDefault())
                    .ToList().Sum(s => s.Grade) / ListGrades.Where(e => e.UserId == member.UserId && e.GroupId == Group.GroupId)
                    .GroupBy(g => g.GradedById)
                    .Select(g => g.OrderByDescending(g => g.GradeId).FirstOrDefault())
                    .ToList().Count;
        }
        GPA = GroupMembers.Where( e => e.GroupId == Group.GroupId).ToList().Sum(e => e.Average) / GroupMembers.Where( e => e.GroupId == Group.GroupId).ToList().Count;
        @* GPA = (ListGrades.Where( e => e.GroupId == Group.GroupId).ToList().Sum( e => e.Grade) / GroupMembers.Count) ; *@
        data = new double[] { GPA, GPA - 100 };
        await AppState.NotifyStateChangedAsync();
    }
}