@inject IGroupService GroupService
@inject ISnackbar Snackbar
@inject IScheduleService ScheduleService
@inject IAccountService AccountService
@inject IPanelistService PanelistService

<MudDialog>
    <DialogContent>
        <MudGrid Spacing="2">
            <MudItem xs="12">
                <MudSelect Value="@Group" 
                ValueChanged="(GroupModel g)=> SetGroup(g)"
                Margin="Margin.Dense" Text=""
                Label="Select Group" HelperText="Required*" Placeholder="Group" AdornmentIcon="@Icons.Material.Filled.People" AdornmentColor="Color.Primary">
                    @foreach (var g in ListGroups.ToList())
                    {
                        <MudSelectItem Value="@g">@g.Groupname</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            @* <MudItem xs="12">
                <MudSelect @bind-Value="Schedule.Status" Margin="Margin.Dense" Label="Status" HelperText="Required*" Placeholder="Role" AdornmentIcon="@Icons.Material.Filled.Workspaces" AdornmentColor="Color.Primary">
                    @foreach (Enums.Status item in Enum.GetValues(typeof(Enums.Status)))
                    {
                        <MudSelectItem Value="@item">@Extensions.GetEnumDescription(item)</MudSelectItem>
                    }
                </MudSelect>
            </MudItem> *@
            <MudItem xs="12">
                <MudSelect @bind-Value="Schedule.DefenseType" Margin="Margin.Dense" Label="Type" HelperText="Required*" Placeholder="Role" AdornmentIcon="@Icons.Material.Filled.Workspaces" AdornmentColor="Color.Primary">
                    @foreach (Enums.FilePosition item in Enum.GetValues(typeof(Enums.FilePosition)))
                    {
                        <MudSelectItem Value="@item">@Extensions.GetEnumDescription(item)</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudTimePicker Label="Start" AmPm="true" @bind-Time="time1" AnchorOrigin="Origin.TopCenter" TransformOrigin="Origin.TopCenter"/>
            </MudItem>
            <MudItem xs="12">
                <MudTimePicker Label="End" AmPm="true" @bind-Time="time2" AnchorOrigin="Origin.TopCenter" TransformOrigin="Origin.TopCenter"/>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Size="Size.Small">Close</MudButton>
        <MudButton OnClick="Save" Variant="MudBlazor.Variant.Filled" Color="Color.Info" Size="Size.Small">SAVE</MudButton>
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public ScheduleModel Schedule { get; set; }
    [Parameter] public DateTime? DateStart { get; set; }
    [Parameter] public DateTime? DateEnd { get; set; }
    private List<GroupModel> ListGroups = new();
    private GroupModel Group = new();
    TimeSpan? time1 = new TimeSpan(00, 01, 00);
    TimeSpan? time2 = new TimeSpan(00, 02, 00);
    IEnumerable<UserAccountModel> Accounts;
    IEnumerable<GroupModel> GroupsWithMembers;

    protected override async Task OnParametersSetAsync()
    {
        if(Schedule.ScheduleId == 0 )
        {
            Schedule.Start = DateStart;
            Schedule.End = DateEnd;
        } else {
            time1 = new TimeSpan(Schedule.Start.Value.Hour, Schedule.Start.Value.Minute, 0);
            time2 = new TimeSpan(Schedule.End.Value.Hour, Schedule.End.Value.Minute, 0);
        }
        await GetGroups();
    }
    private async Task GetGroups()
    {
        Task<IEnumerable<GroupModel>> data =  GroupService.GetGroups();
        await data;
        if(data.Status == TaskStatus.RanToCompletion)
        {
            ListGroups = data.Result.ToList();
            if (GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
            {
                ListGroups = ListGroups.Where(e => e.UserId == GlobalClass.CurrentUserAccount.UserId).ToList();
            }
            Group = ListGroups.FirstOrDefault() ?? new();
            await SetGroup(Group);
        } 
    }
    private async Task GetAccounts()
    {
        Task<IEnumerable<UserAccountModel>> a = AccountService.GetAccounts();
        await a;
        if(a.Status == TaskStatus.RanToCompletion)
        {
            Accounts = a.Result;
            await GetGroupWithMembers();
        }

    }
    private async Task SetGroup(GroupModel groupModel)
    {
        Group = groupModel;
        Schedule.Text = Group.Groupname;
        await GetAccounts();
    }
    private async Task Save()
    {    
        DateTime newStart = new DateTime(Schedule.Start.Value.Year, Schedule.Start.Value.Month, Schedule.Start.Value.Day, time1.Value.Hours,time1.Value.Minutes,0);
        DateTime newEnd = new DateTime(Schedule.End.Value.Year, Schedule.End.Value.Month, Schedule.Start.Value.Day, time2.Value.Hours,time2.Value.Minutes,0);

        Schedule.Start = newStart;
        Schedule.End = newEnd;
        Schedule.GroupId = Group.GroupId;
        if(time1 >= time2)
        {
            Extensions.ShowAlert("Time start should not be greater than.", MudBlazor.Variant.Filled , Snackbar , Severity.Error);
            return;
        }
        ScheduleModel clone = Extensions.Clone(Schedule);
        Task<ScheduleModel> t = Schedule.ScheduleId == 0? ScheduleService.PostScheduleModel(Schedule) : ScheduleService.PutScheduleModel(Schedule.ScheduleId, Schedule);
        await t;
        if(t.Status == TaskStatus.RanToCompletion)
        {
            if(clone.ScheduleId == 0)
            {
                UserAccountModel panel = Accounts.ToList().FirstOrDefault(e => e.Designation.Contains("dean", StringComparison.InvariantCultureIgnoreCase))?? new();
                UserAccountModel panelchairman = Accounts.ToList().FirstOrDefault(e => e.Designation.Contains("chairman", StringComparison.InvariantCultureIgnoreCase)) ?? new();
                if(panel.UserId != 0 || panelchairman.UserId != 0)
                {
                    if(panel.UserId != 0)
                        await AddPanel(panel, t.Result);
                    if(panelchairman.UserId != 0)
                        await AddPanel(panelchairman, t.Result);
                    GroupModel g = GroupsWithMembers.ToList().FirstOrDefault(e => e.GroupId == Group.GroupId) ?? new();
                    if (g.GroupId == 0)
                        return;
                    
                    UserAccountModel panel2 = new();
                    if (g.Program.Contains("it", StringComparison.InvariantCultureIgnoreCase))
                    {
                        panel2 = Accounts.ToList().FirstOrDefault(e =>
                        (e.Designation.Contains("head", StringComparison.InvariantCultureIgnoreCase) &&  e.Designation.Contains("it", StringComparison.InvariantCultureIgnoreCase)) ||
                        (e.Designation.Contains("chairman", StringComparison.InvariantCultureIgnoreCase) && e.Designation.Contains("it", StringComparison.InvariantCultureIgnoreCase))
                        ) ?? new();
                    }
                    else if (g.Program.Contains("is", StringComparison.InvariantCultureIgnoreCase))
                    {
                        panel2 = Accounts.ToList().FirstOrDefault(e =>
                        (e.Designation.Contains("head", StringComparison.InvariantCultureIgnoreCase) && e.Designation.Contains("is", StringComparison.InvariantCultureIgnoreCase)) ||
                        (e.Designation.Contains("chairman", StringComparison.InvariantCultureIgnoreCase) && e.Designation.Contains("is", StringComparison.InvariantCultureIgnoreCase))
                        ) ?? new();
                    }
                    else if (g.Program.Contains("cs", StringComparison.InvariantCultureIgnoreCase))
                    {
                        panel2 = Accounts.ToList().FirstOrDefault(e =>
                        (e.Designation.Contains("head", StringComparison.InvariantCultureIgnoreCase) && e.Designation.Contains("cs", StringComparison.InvariantCultureIgnoreCase)) ||
                        (e.Designation.Contains("chairman", StringComparison.InvariantCultureIgnoreCase) && e.Designation.Contains("cs", StringComparison.InvariantCultureIgnoreCase))
                        ) ?? new();
                    }
                    if (panel2.UserId != 0)
                        await AddPanel(panel2, t.Result);
                }
            }
            MudDialog.Close();
        }
    }
    private async Task GetGroupWithMembers()
    {
        GroupsWithMembers = await GroupService.GetGroupsWithUsers();
    }
    private async Task AddPanel(UserAccountModel user,ScheduleModel sched)
    {
        PanelistModel panel = new();
        panel.GroupId = Group.GroupId;
        panel.UserId = user.UserId;
        panel.ScheduleId = sched.ScheduleId;
        Task t = PanelistService.PostPanelistModel(panel);
        await t;
        if(t.Status == TaskStatus.RanToCompletion)
        {
            
        } 
    }
    void Cancel() => MudDialog.Cancel();
}
<style>
    .custom-datepicker .rz-datepicker-popup {
        border-top: none;
        border-left: none;
        border-right: none;
    }
    .rz-slot:hover
    {
        background-color: #d3d3d3 !important;
        cursor: pointer;
    }
</style>