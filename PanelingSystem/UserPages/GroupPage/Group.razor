@page "/u/group"
@using Microsoft.AspNetCore.Mvc

@inject IGroupService GroupServices
@inject IDialogService DialogService
@inject IMemberService MemberService
@inject ISnackbar Snackbar
@inject IReportService ReportService
@inject IScheduleService ScheduleService
@inject IGroupService GroupService

<div class="d-flex justify-content-center align-items-center">
    <MudPaper Class="pa-2" Elevation="3" Height="88vh" Width="100%">
        @if(!ShowReport)
        {
            <MudTable Items="ListOfGroups"
            Dense="true" Hover="true" @ref="table" Height="70vh" Loading="Loading">
                <ToolBarContent>
                    <MudText Class="mr-2" Typo="Typo.h6" Dense="Margin.Dense" Immediate="true">Groups</MudText>
                    <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    <MudSpacer />
                    <div class="d-flex flex-1 justify-end">
                        <MudButton Class="mr-3" OnClick="Toggle" StartIcon="@Icons.Material.Filled.PictureAsPdf" Color="Color.Error" Variant="MudBlazor.Variant.Filled" Size="Size.Small">GRADE SHEETS</MudButton>
                        @* <MudButton Class="mr-3" OnClick="Print" StartIcon="@Icons.Material.Filled.PictureAsPdf" Color="Color.Error" Variant="MudBlazor.Variant.Filled" Size="Size.Small">PRINT GROUPS</MudButton> *@
                        <MudPopover Open="@_isOpen" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" Fixed="true" Class="px-4 pt-4" style="width: 400px;">
                            <MudGrid Spacing="1" Class="mb-4">
                                <MudItem Class="d-flex" xs="12">
                                    <MudText Typo="Typo.button">FILTER</MudText>
                                </MudItem>
                                <MudItem Class="mb-2" xs="12">
                                    <MudDivider/>
                                </MudItem>
                                <MudItem xs=2><MudCheckBox @bind-Value="parameter.IsProgram"></MudCheckBox></MudItem>
                                <MudItem xs=10>
                                    <MudTextField @bind-Value="parameter.ProgramName" Label="Program" Variant='MudBlazor.Variant.Outlined' Margin='Margin.Dense' Disabled="!parameter.IsProgram"/>
                                </MudItem>
                                <MudItem xs=2><MudCheckBox @bind-Value="parameter.IsSection"></MudCheckBox></MudItem>
                                <MudItem xs=10>
                                    <MudTextField @bind-Value="parameter.SectionName" Label="Section" Variant='MudBlazor.Variant.Outlined' Margin='Margin.Dense' Disabled="!parameter.IsSection"/>
                                </MudItem>
                                <MudItem xs=2><MudCheckBox @bind-Value="parameter.IsYear"></MudCheckBox></MudItem>
                                <MudItem xs=10>
                                    <MudTextField @bind-Value="parameter.Year" Label="Year" Variant='MudBlazor.Variant.Outlined' Margin='Margin.Dense' Disabled="!parameter.IsYear"/>
                                </MudItem>
                                <MudItem xs=2><MudCheckBox @bind-Value="parameter.IsChapter"></MudCheckBox></MudItem>
                                <MudItem xs="10">
                                    <MudSelect @bind-Value="parameter.GradeType" Margin="Margin.Dense" Label="Type" Variant='MudBlazor.Variant.Outlined'  AdornmentColor="Color.Primary" Disabled="!parameter.IsChapter">
                                        @foreach (Enums.FilePosition item in Enum.GetValues(typeof(Enums.FilePosition)))
                                        {
                                            <MudSelectItem Value="@item">@Extensions.GetEnumDescription(item)</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="6"></MudItem>
                                <MudItem xs="6">
                                    <MudButton OnClick="@Toggle" Class="ml-auto mr-1 mb-3" Color="MudBlazor.Color.Default">Close</MudButton>
                                    <MudButton OnClick="@Filter" Class="ml-auto mr-n3 mb-3" Variant="MudBlazor.Variant.Filled" Color="Color.Info">Generate</MudButton> 
                                </MudItem>
                            </MudGrid>
                        </MudPopover>
                    
                    </div>
                    @if(ListOfGroups == null)
                    {
                        <MudButton OnClick="()=> OpenGroupDialog(new GroupModel())" StartIcon="@Icons.Material.Filled.Add" Variant="MudBlazor.Variant.Filled" Size="Size.Small"  Color="Color.Primary">NEW</MudButton>
                    } else {
                        if(GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Student && ListOfGroups.ToList().Count > 0)
                        {

                        } else {
                            <MudButton OnClick="()=> OpenGroupDialog(new GroupModel())" StartIcon="@Icons.Material.Filled.Add" Variant="MudBlazor.Variant.Filled" Size="Size.Small"  Color="Color.Primary">NEW</MudButton>
                        }
                    }
                </ToolBarContent>
                <ColGroup>
                    <col />
                    <col />
                    <col />
                    <col />
                    <col />
                    <col style="width: 1%;"/>
                    @* <col /> *@
                </ColGroup>
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortLabel="GroupThesisTitle" T="UserAccountModel">Title</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Groupname" T="UserAccountModel">Group Name</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Program" T="UserAccountModel">Program</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Year" T="UserAccountModel">Year</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Section" T="UserAccountModel">Section</MudTableSortLabel></MudTh>
                    @* <MudTh><MudTableSortLabel SortLabel="Status" T="UserAccountModel">Status</MudTableSortLabel></MudTh> *@
                    <MudTh Class='customheader-1 text-center pa-2'>Action</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="GroupThesisTitle">@context.GroupThesisTitle</MudTd>
                    <MudTd DataLabel="Groupname">@context.Groupname</MudTd>
                    <MudTd DataLabel="Program">@context.Program</MudTd>
                    <MudTd DataLabel="Year">@context.Year</MudTd>
                    <MudTd DataLabel="Year">@context.Section</MudTd>
                    @* <MudTd DataLabel="Status">
                        <MudChip Size="Size.Small">@Extensions.GetEnumDescription(context.Status)</MudChip>
                    </MudTd> *@
                    <MudTd Class='text-center pa-2'>
                        <MudMenu Icon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.TopLeft'
                        TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small'>
                            <MudMenuItem OnClick="()=> OpenGroupDialog(context)">
                                <div class='d-flex align-center gap-2 '>
                                    <MudIcon Icon='@Icons.Material.Filled.Edit' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Edit</MudText>
                                </div>
                            </MudMenuItem>
                            <MudMenuItem OnClick="()=> AddMembers(context)">
                                <div class='d-flex align-center gap-2 '>
                                    <MudIcon Icon='@Icons.Material.Filled.PersonAdd' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Add Members</MudText>
                                </div>
                            </MudMenuItem>
                            <MudMenuItem OnClick="()=> RemoveGroup(context)">
                                <div class='d-flex align-center gap-2 '>
                                    <MudIcon Icon='@Icons.Material.Filled.Delete' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Remove</MudText>
                                </div>
                            </MudMenuItem>
                        </MudMenu>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText>No matching records found</MudText>
                </NoRecordsContent>
                <LoadingContent>
                    <MudText>Loading...</MudText>
                </LoadingContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        }
        else
        {
            <div class="d-flex flex-column" style="width: 100%;height: 85vh;">
                <MudButton OnClick="()=> ShowReport = !ShowReport" Class="ml-auto mr-1 mb-3" Variant="MudBlazor.Variant.Filled" Color="Color.Error" Label="true">Close</MudButton>
                <iframe src='@PDF' style='height:78vh;' />
            </div>
        }
    </MudPaper>
</div>

@code {
    private IEnumerable<GroupModel> pagedData;
    private MudTable<GroupModel> table;

    private int totalItems;
    private string searchString = null;
    private bool Loading = true;
    private IEnumerable<GroupModel> ListOfGroups = null;
    private bool ShowReport = false;
    private string PDF { get; set; } = string.Empty;
    List<ScheduleModel> Schedules = new();
    List<GroupModel> Groups = new();

    public bool _isOpen;
    FilterParameter parameter = new();
    protected override async Task OnInitializedAsync()
    {
        ListOfGroups = GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Student ?
            await GroupServices.GetMyGroups(GlobalClass.CurrentUserAccount.UserId) : await GroupServices.GetGroups();
        if (GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
        {
            ListOfGroups = ListOfGroups.Where(e => e.UserId == GlobalClass.CurrentUserAccount.UserId).ToList();
        }
        totalItems = ListOfGroups.Count();
        Loading = false;
        StateHasChanged();
    }
    private async Task<TableData<GroupModel>> ServerReload(TableState state)
    {
        Task<IEnumerable<GroupModel>> data = GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Student?
            GroupServices.GetMyGroups(GlobalClass.CurrentUserAccount.UserId) : GroupServices.GetGroups();
        await data;
        await Task.Delay(300);
        ListOfGroups = data.Result.Where(grp =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (grp.GroupThesisTitle.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (grp.Groupname.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (grp.Program.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (grp.Year.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (grp.Status.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();
        if (GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
        {
            ListOfGroups = ListOfGroups.Where(e => e.UserId == GlobalClass.CurrentUserAccount.UserId).ToList();
        }
        totalItems = ListOfGroups.Count();
        switch (state.SortLabel)
        {
            case "name":
                ListOfGroups = data.Result.OrderByDirection(state.SortDirection, o => o.GroupThesisTitle);
                break;
            case "email":
                ListOfGroups = data.Result.OrderByDirection(state.SortDirection, o => o.Groupname);
                break;
            case "designation":
                ListOfGroups = data.Result.OrderByDirection(state.SortDirection, o => o.Program);
                break;
            case "username":
                ListOfGroups = data.Result.OrderByDirection(state.SortDirection, o => o.Year);
                break;
            case "role":
                ListOfGroups = data.Result.OrderByDirection(state.SortDirection, o => o.Status);
                break;
        }

        pagedData = ListOfGroups.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        Loading = false;
        StateHasChanged();
        return new TableData<GroupModel>() {TotalItems = totalItems, Items = pagedData};
    }
    private async Task Print()
    {
        Task task = GetSchedules();
        await task;
        if(task.Status == TaskStatus.RanToCompletion)
        {
            List<ReportModel> reports = new();
            int count = 0;
            foreach (ScheduleModel sched in Schedules)
            {
                foreach (MembersModel member in sched.Members)
                {
                    ReportModel r = new();
                    r.ScheduleId = sched.ScheduleId;
                    r.GroupId = sched.GroupId;
                    r.StatusText = Extensions.GetEnumDescription(sched.Status);
                    r.DefenseTypeText = Extensions.GetEnumDescription(sched.DefenseType);
                    r.Start = sched.Start;
                    r.End = sched.End;
                    r.GroupThesisTitle = sched.Group.GroupThesisTitle;
                    r.Groupname = sched.Group.Groupname;
                    r.Program = sched.Group.Program;
                    r.Year = sched.Group.Year;
                    r.MemberId = member.MemberId;
                    r.UserId = member.UserId;
                    r.Name = member.Student.Name;
                    reports.Add(r);
                }
            }
            IActionResult report = ReportService.GetMasterListReport(reports);
            if (report is FileContentResult fileContentResult)
            {
                byte[] pdfBytes = fileContentResult.FileContents;
                PDF = "data:application/pdf;base64," + Convert.ToBase64String(pdfBytes);
            }
            ShowReport = !ShowReport;
            StateHasChanged();
        }
    }
    private async Task GetSchedules()
    {
        Task<IEnumerable<ScheduleModel>> task = ScheduleService.GetSchedules();
        await task;
        if (task.Status == TaskStatus.RanToCompletion)
        {
            Schedules = task.Result.ToList();
            await GetMyGroups();
        }
    }
    private async Task GetMyGroups()
    {
        Task<IEnumerable<GroupModel>> aa = GroupService.GetGroupsWithUsers();
        await aa;
        if (aa.Status == TaskStatus.RanToCompletion)
        {
            Groups = aa.Result.ToList();
            foreach (ScheduleModel sched in Schedules)
            {
                foreach (GroupModel group in Groups)
                {
                    if (sched.GroupId == group.GroupId)
                    {
                        sched.Members = group.Members;
                    }
                }
            }
        }
        StateHasChanged();
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
    private async Task OpenGroupDialog(GroupModel group)
    {
        var options = new MudBlazor.DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true,BackdropClick = true };
        var param = new DialogParameters();
        param.Add("Group", group);
        var dialog =  await DialogService.Show<GroupDialog>(group.GroupId == 0 ? "Add Group" : "Edit Group", param, options).Result;
        if(!dialog.Canceled)
        {
            await table.ReloadServerData();
        }
    }
    private async Task RemoveGroup(GroupModel group)
    {
        Task t = GroupServices.DeleteGroupModel(group.GroupId);
        await t;
        if(t.Status == TaskStatus.RanToCompletion)
        {
            Extensions.ShowAlert("Group has been removed.", MudBlazor.Variant.Filled, Snackbar, Severity.Info);
        }
    }
    private async Task AddMembers(GroupModel group)
    {
        var options = new MudBlazor.DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true,BackdropClick = true };
        var param = new DialogParameters();
        param.Add("Group", group);
        var dialog =  await DialogService.Show<AddMembersDialog>("Add Members", param, options).Result;
        if(!dialog.Canceled)
        {
            await table.ReloadServerData();
        }
    }
    public void Toggle()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }
    private async Task Filter()
    {
        List<GradeSheetModel> gSheets = new();
        Loading = true;
        Task<IEnumerable<GroupModel>> data = GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Student?
            GroupServices.GetMyGroups(GlobalClass.CurrentUserAccount.UserId, parameter) : GroupServices.GetGroupsWithUsers(parameter);
        await data;
        if(data.Status == TaskStatus.RanToCompletion) {
            ListOfGroups = data.Result.ToList();
            if (GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
            {
                ListOfGroups = ListOfGroups.Where(e => e.UserId == GlobalClass.CurrentUserAccount.UserId).ToList();
            }
            totalItems = ListOfGroups.Count();
            Loading = false;
            Toggle();
            StateHasChanged();
            foreach(var g in ListOfGroups) {
                foreach(var m in g.Members) {
                    var grades = new GradeSheetModel();
                    m.PanelGrades = await _panelGradeService.GetMemeberGrades(m.MemberId, parameter.GradeType);
                    grades.Section  = g.Section;
                    grades.Year  = g.Year;
                    grades.Program  = g.Program;
                    grades.Name = m.Student.Name;
                    if(parameter.GradeType == Enums.FilePosition.Title) {
                        grades.Grade = m.TitleAverage;
                    } else if(parameter.GradeType == Enums.FilePosition.PreOral) {
                        grades.Grade = m.PreOralAverage;
                    } else {
                        grades.Grade = m.FinalAverage;
                    }
                    gSheets.Add(grades);
                    StateHasChanged();
                }
            }
            IActionResult report = ReportService.GetGradeSheetReport(gSheets, parameter.GradeType);
            if (report is FileContentResult fileContentResult)
            {
                byte[] pdfBytes = fileContentResult.FileContents;
                PDF = "data:application/pdf;base64," + Convert.ToBase64String(pdfBytes);
            }
            ShowReport = !ShowReport;
            StateHasChanged();
        }
    }

}
<style>
    .mud-toolbar.mud-table-toolbar
    {
        height: 40px;
        display: flex;
        align-items: end;
    }
</style>