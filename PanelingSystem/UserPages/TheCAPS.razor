@page "/thecaps"

@inject IGroupService GroupServices
@inject IDialogService DialogService
@inject IMemberService MemberService
@inject ISnackbar Snackbar
@inject IScheduleService ScheduleService
@inject ICapstoneFileService CapstoneFileService
@inject ICommentService CommentService
@inject IJSRuntime JSRuntime
@inject IVerdictService _verdictService
@inject IPanelistService PanelistService

<div class="d-flex justify-content-center align-items-center">
    <MudTable Items="ListOfGroups"
    Dense="true" Hover="true" @ref="table" Height="80vh" style="width: 100%;" Loading="Loading">
        <ToolBarContent>
            <MudText Class="mr-2" Typo="Typo.h6" Dense="Margin.Dense" Immediate="true">Groups</MudText>
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            @if(GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
            {
                <div class="d-flex gap-2 px-2">
                    <MudButton OnClick="()=> Filter(true)" Variant="MudBlazor.Variant.Filled">Panelist</MudButton>
                    <MudButton OnClick="()=> Filter(false)" Variant="MudBlazor.Variant.Filled">Adviser</MudButton>
                </div>
            }
            <MudSpacer />
            <MudButton OnClick="Toggle" Variant="MudBlazor.Variant.Text" EndIcon="@Icons.Material.Filled.FilterList">FILTER</MudButton>
            <MudPopover Open="@_isOpen" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" Fixed="true" Class="px-4 pt-4" style="width: 400px;">
                <MudGrid Spacing="1" Class="mb-4">
                    <MudItem Class="d-flex" xs="12">
                        <MudText Typo="Typo.button">FILTER</MudText>
                    </MudItem>
                    <MudItem Class="mb-2" xs="12">
                        <MudDivider/>
                    </MudItem>
                    <MudItem xs=2><MudCheckBox @bind-Value="parameter.IsProgram"></MudCheckBox></MudItem>
                    <MudItem xs=10>
                        <MudTextField @bind-Value="parameter.ProgramName" Label="Program" Variant='MudBlazor.Variant.Outlined' Margin='Margin.Dense' Disabled="!parameter.IsProgram"/>
                    </MudItem>
                    <MudItem xs=2><MudCheckBox @bind-Value="parameter.IsSection"></MudCheckBox></MudItem>
                    <MudItem xs=10>
                        <MudTextField @bind-Value="parameter.SectionName" Label="Section" Variant='MudBlazor.Variant.Outlined' Margin='Margin.Dense' Disabled="!parameter.IsSection"/>
                    </MudItem>
                    <MudItem xs=2><MudCheckBox @bind-Value="parameter.IsYear"></MudCheckBox></MudItem>
                    <MudItem xs=10>
                        <MudTextField @bind-Value="parameter.Year" Label="Year" Variant='MudBlazor.Variant.Outlined' Margin='Margin.Dense' Disabled="!parameter.IsYear"/>
                    </MudItem>
                    <MudItem xs="7"></MudItem>
                    <MudItem xs="5">
                        <MudButton OnClick="@Toggle" Class="ml-auto mr-1 mb-3" Color="MudBlazor.Color.Default">Close</MudButton>
                        <MudButton OnClick="@Filter" Class="ml-auto mr-n3 mb-3" Variant="MudBlazor.Variant.Filled" Color="Color.Info">Filter</MudButton> 
                    </MudItem>
                </MudGrid>
            </MudPopover>
        </ToolBarContent>
        <ColGroup>
            <col />
            <col />
            <col />
            <col />
            <col />
            @* <col /> *@
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortLabel="Groupname" T="UserAccountModel">Group Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="GroupThesisTitle" T="UserAccountModel">Members</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="Program" T="UserAccountModel">Program</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="Year" T="UserAccountModel">Year</MudTableSortLabel></MudTh>
            @* <MudTh><MudTableSortLabel SortLabel="Status" T="UserAccountModel">Status</MudTableSortLabel></MudTh> *@
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="GroupThesisTitle">
                <MudButton OnClick="()=> GetFiles(context)" Variant="MudBlazor.Variant.Text">@context.Groupname</MudButton>
            </MudTd>
            <MudTd DataLabel="Groupname">
                @foreach(MembersModel member in context.Members) {
                    <div class="d-flex justify-space-between">
                        <span>@member.Student.Name</span><br>
                        <MudTooltip Text="Add Grade">
                            <MudIconButton OnClick="()=> GetPanelGrade(member, Enums.FilePosition.Title, true)" Icon="@Icons.Material.Filled.RateReview" Size="Size.Small"
                            Disabled="@(GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Admin)"
                            >
                            </MudIconButton>
                            <MudPopover Open="@member.OpenGrade" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                                <div class="d-flex flex-column pa-3 gap-2" style="width: 200px; height: auto;">
                                    @if(!isLoadingType) {
                                        <MudSelect T="Enums.FilePosition" 
                                            Value="member.CurrentPanelGrade.DefenseType" 
                                            ValueChanged="(e)=> GetPanelGrade(member, e, false)"Label="Defense Type">
                                            @foreach (Enums.FilePosition item in Enum.GetValues(typeof(Enums.FilePosition)))
                                            {
                                                <MudSelectItem Value="item">@item</MudSelectItem>
                                            }
                                        </MudSelect>
                                    }
                                    <MudTextField @bind-Value="@member.CurrentPanelGrade.Grade" Label="Grade" Variant="MudBlazor.Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                                    <MudButton OnClick="()=> SavePanelGrade(member)" Variant="MudBlazor.Variant.Filled" Size="Size.Small" Color="Color.Primary">Save Grade</MudButton>
                                    <style>
                                        .mud-input.mud-input-outlined {
                                        flex: unset;
                                        }
                                    </style>
                                </div>
                            </MudPopover>
                        </MudTooltip>
                    </div>
                }
            </MudTd>
            <MudTd DataLabel="Program">@context.Program</MudTd>
            <MudTd DataLabel="Year">@context.Year</MudTd>
        </RowTemplate>
        <ChildRowContent>
            @if(context.IsShowDetails) {
                <td colspan="4" style="background-color: beige;">
                    <div class="pa-2 justify-content-center align-items-center" style="width: 100%;">
                        <MudTabs Elevation="1" Rounded="true" PanelClass="pa-2" style="width: 100%; background: white;">
                            <MudTabPanel Text="Title" OnClick="()=> OnChapterChange(Enums.Chapter.Title1, Group)">
                                <MudPaper class="d-flex flex-column pa-3">
                                    <div class="d-flex flex-row gap-10 align-items-center">
                                        <span class="flex-1"><b>Title - </b> @context.Title1.Title</span>
                                        <MudButton OnClick="()=>  {
                                                GetComments(Enums.Chapter.Title1, context, context.title1Open);
                                                context.title1Open = !context.title1Open;
                                                }" Variant="MudBlazor.Variant.Text">
                                            <MudPopover Open="@context.title1Open" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                                                <div class="d-flex flex-column pa-2 overflow-y-auto" style="width: 400px; height: 400px;">
                                                    <span></span>
                                                    <span>Title 1 Comments</span>
                                                    <hr>
                                                    @if(isLoadingComment)
                                                    {
                                                        @foreach (CommentModel comment in context.Comments)
                                                        {
                                                            <div class="d-flex flex-column pa-2 gap-2">
                                                                <CommentComponent Comment="@comment"></CommentComponent>
                                                            </div>
                                                        }
                                                        @if(GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
                                                        {
                                                            <MudTextField @bind-Value="comment" HelperText="Type your comment here." AdornmentIcon="@Icons.Material.Filled.Send" 
                                                            Variant="MudBlazor.Variant.Text" Adornment="Adornment.End"  Margin="Margin.Dense" OnAdornmentClick="()=> AddComment(context, Enums.Chapter.Title1)"/>
                                                        }
                                                    }
                                                </div>
                                            </MudPopover>
                                            Comments
                                        </MudButton>
                                        <MudButton OnClick="()=> Download(context.Title1)" Variant="MudBlazor.Variant.Text">Download</MudButton>
                                        <MudButton OnClick="()=> View(context.Title1)" Variant="MudBlazor.Variant.Text">View</MudButton>
                                    </div>
                                    <div class="d-flex flex-row gap-10 align-items-center">
                                        <span class="flex-1"><b>Title - </b> @context.Title2.Title</span>
                                        <MudButton OnClick="()=>  {
                                                GetComments(Enums.Chapter.Title2, context, context.title2Open);
                                                context.title2Open = !context.title2Open;
                                                }" Variant="MudBlazor.Variant.Text">
                                            <MudPopover Open="@context.title2Open" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                                                <div class="d-flex flex-column pa-2 overflow-y-auto" style="width: 400px; height: 400px;">
                                                    <span>Title 2 Comments</span>
                                                    <span>Comments</span>
                                                    <hr>
                                                    @if(isLoadingComment)
                                                    {
                                                        @foreach (CommentModel comment in context.Comments)
                                                        {
                                                            <div class="d-flex flex-column pa-2 gap-2">
                                                                <CommentComponent Comment="@comment"></CommentComponent>
                                                            </div>
                                                        }
                                                        @if(GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
                                                        {
                                                            <MudTextField @bind-Value="comment" HelperText="Type your comment here." AdornmentIcon="@Icons.Material.Filled.Send" 
                                                            Variant="MudBlazor.Variant.Text" Adornment="Adornment.End"  Margin="Margin.Dense" OnAdornmentClick="()=> AddComment(context, Enums.Chapter.Title2)"/>
                                                        }
                                                    }
                                                </div>
                                            </MudPopover>
                                            Comments
                                        </MudButton>
                                        <MudButton OnClick="()=> Download(context.Title2)" Variant="MudBlazor.Variant.Text">Download</MudButton>
                                        <MudButton OnClick="()=> View(context.Title2)" Variant="MudBlazor.Variant.Text">View</MudButton>
                                    </div>
                                    <div class="d-flex flex-row gap-10 align-items-center">
                                        <span class="flex-1"><b>Title - </b> @context.Title3.Title</span>
                                        <MudButton OnClick="()=>  {
                                                GetComments(Enums.Chapter.Title3, context, context.title3Open);
                                                context.title3Open = !context.title3Open;
                                                }" Variant="MudBlazor.Variant.Text">
                                            <MudPopover Open="@context.title3Open" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                                                <div class="d-flex flex-column pa-2 overflow-y-auto" style="width: 400px; height: 400px;">
                                                    <span>Title 3 Comments</span>
                                                    <span>Comments</span>
                                                    <hr>
                                                    @if(isLoadingComment)
                                                    {
                                                        @foreach (CommentModel comment in context.Comments)
                                                        {
                                                            <div class="d-flex flex-column pa-2 gap-2">
                                                                <CommentComponent Comment="@comment"></CommentComponent>
                                                            </div>
                                                        }
                                                        @if(GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
                                                        {
                                                            <MudTextField @bind-Value="comment" HelperText="Type your comment here." AdornmentIcon="@Icons.Material.Filled.Send" 
                                                            Variant="MudBlazor.Variant.Text" Adornment="Adornment.End"  Margin="Margin.Dense" OnAdornmentClick="()=> AddComment(context, Enums.Chapter.Title3)"/>
                                                        }
                                                    }
                                                </div>
                                            </MudPopover>
                                            Comments
                                        </MudButton>
                                        <MudButton OnClick="()=> Download(context.Title3)" Variant="MudBlazor.Variant.Text">Download</MudButton>
                                        <MudButton OnClick="()=> View(context.Title3)" Variant="MudBlazor.Variant.Text">View</MudButton>
                                    </div>
                                </MudPaper>
                                <hr>
                                <MudGrid Spacing="1">
                                    <MudItem xs="12">
                                        <span>Panel Recommendation</span>
                                        <hr/>
                                    </MudItem>
                                    <MudItem xs="2">
                                        <MudSelect T="Enums.Chapter" Value="DenfenseVerdict.Chapter" ValueChanged="(Enums.Chapter e) => OnChapterChange(e, Group)" Margin="Margin.Dense" Label="Title"
                                        Variant="MudBlazor.Variant.Outlined"
                                        Disabled="@((GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Admin) || (context.UserId == GlobalClass.CurrentUserAccount.UserId && GlobalClass.CurrentUserAccount.AccountType != Enums.AccountType.Panelist_Adviser) && !context.ListOfPanels.Any( e => e.UserId == GlobalClass.CurrentUserAccount.UserId))">
                                            @foreach (Enums.Chapter item in Enum.GetValues(typeof(Enums.Chapter)).Cast<Enums.Chapter>().Where(c => c == Enums.Chapter.Title1 || c == Enums.Chapter.Title2 || c == Enums.Chapter.Title3))
                                            {
                                                <MudSelectItem Value="@item">@Extensions.GetEnumDescription(item)</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="8"></MudItem>
                                    <MudItem xs="2">
                                        <MudTextField T="double" @bind-Value="DenfenseVerdict.Grade" Label="Grade" Variant="MudBlazor.Variant.Outlined" Margin="Margin.Dense"
                                        Disabled="@((GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Admin) || (context.UserId == GlobalClass.CurrentUserAccount.UserId && GlobalClass.CurrentUserAccount.AccountType != Enums.AccountType.Panelist_Adviser) && !context.ListOfPanels.Any( e => e.UserId == GlobalClass.CurrentUserAccount.UserId))"></MudTextField>
                                    </MudItem>
                                    <MudItem xs="2">
                                        <MudSelect T="Enums.Status?" Value="DenfenseVerdict.Status" ValueChanged="(e) => OnStatusChange(e)" Margin="Margin.Dense" Label="Verdict"
                                        Variant="MudBlazor.Variant.Outlined"
                                        Disabled="@((GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Admin) || (context.UserId == GlobalClass.CurrentUserAccount.UserId && GlobalClass.CurrentUserAccount.AccountType != Enums.AccountType.Panelist_Adviser) && !context.ListOfPanels.Any( e => e.UserId == GlobalClass.CurrentUserAccount.UserId))">
                                            @foreach (Enums.Status? item in Enum.GetValues(typeof(Enums.Status)))
                                            {
                                                <MudSelectItem Value="@item">@Extensions.GetEnumDescription(item)</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="8"></MudItem>
                                    <MudItem Class="d-flex justify-content-end" xs="2">
                                        @if (context.UserId != GlobalClass.CurrentUserAccount.UserId && GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
                                        {
                                            <MudButton OnClick="()=> SaveVerdict(DenfenseVerdict.Chapter)" style="height: 40px;" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Info">SAVE</MudButton>
                                        }
                                        else if (GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
                                        {
                                            <MudButton OnClick="()=> SaveVerdict(DenfenseVerdict.Chapter)" style="height: 40px;" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Info">SAVE</MudButton>
                                        }
                                    </MudItem>
                                </MudGrid>
                            </MudTabPanel>
                            <MudTabPanel Text="Pre Oral" OnClick="()=> OnChapterChange(Enums.Chapter.Chapter1, Group)">
                                <MudPaper class="d-flex flex-column pa-3">
                                    <div class="d-flex flex-row gap-10 align-items-center">
                                        <span class="flex-1"><b>Chapter 1</b></span>
                                        <MudButton OnClick="()=>  {
                                                GetComments(Enums.Chapter.Chapter1, context, context.chapter1Open);
                                                context.chapter1Open = !context.chapter1Open;
                                                }" Variant="MudBlazor.Variant.Text">
                                            <MudPopover Open="@context.chapter1Open" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                                                <div class="d-flex flex-column pa-2 overflow-y-auto" style="width: 400px; height: 400px;">
                                                    <span>Chapter 1 Comments</span>
                                                    <hr>
                                                    @if(isLoadingComment)
                                                    {
                                                        @foreach (CommentModel comment in context.Comments)
                                                        {
                                                            <div class="d-flex flex-column pa-2 gap-2">
                                                                <CommentComponent Comment="@comment"></CommentComponent>
                                                            </div>
                                                        }
                                                        @if(GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
                                                        {
                                                            <MudTextField @bind-Value="comment" HelperText="Type your comment here." AdornmentIcon="@Icons.Material.Filled.Send" 
                                                            Variant="MudBlazor.Variant.Text" Adornment="Adornment.End"  Margin="Margin.Dense" OnAdornmentClick="()=> AddComment(context, Enums.Chapter.Chapter1)"/>
                                                        }
                                                    }
                                                </div>
                                            </MudPopover>
                                            Comments
                                        </MudButton>
                                        <MudButton OnClick="()=> Download(context.Chapter1)" Variant="MudBlazor.Variant.Text">Download</MudButton>
                                    </div>
                                    <div class="d-flex flex-row gap-10 align-items-center">
                                        <span class="flex-1"><b>Chapter 2</b></span>
                                        <MudButton OnClick="()=>  {
                                                GetComments(Enums.Chapter.Chapter2, context, context.chapter2Open);
                                                context.chapter2Open = !context.chapter2Open;
                                                }" Variant="MudBlazor.Variant.Text">
                                            <MudPopover Open="@context.chapter2Open" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                                                <div class="d-flex flex-column pa-2 overflow-y-auto" style="width: 400px; height: 400px;">
                                                    <span>Chapter 2 Comments</span>
                                                    <hr>
                                                    @if(isLoadingComment)
                                                    {
                                                        @foreach (CommentModel comment in context.Comments)
                                                        {
                                                            <div class="d-flex flex-column pa-2 gap-2">
                                                                <CommentComponent Comment="@comment"></CommentComponent>
                                                            </div>
                                                        }
                                                        @if(GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
                                                        {
                                                            <MudTextField @bind-Value="comment" HelperText="Type your comment here." AdornmentIcon="@Icons.Material.Filled.Send" 
                                                            Variant="MudBlazor.Variant.Text" Adornment="Adornment.End"  Margin="Margin.Dense" OnAdornmentClick="()=> AddComment(context, Enums.Chapter.Chapter2)"/>
                                                        }
                                                    }
                                                </div>
                                            </MudPopover>
                                            Comments
                                        </MudButton>
                                        <MudButton OnClick="()=> Download(context.Chapter2)" Variant="MudBlazor.Variant.Text">Download</MudButton>
                                    </div>
                                    <div class="d-flex flex-row gap-10 align-items-center">
                                        <span class="flex-1"><b>Chapter 3</b></span>
                                        <MudButton OnClick="()=>  {
                                                GetComments(Enums.Chapter.Chapter3, context, context.chapter3Open);
                                                context.chapter3Open = !context.chapter3Open;
                                                }" Variant="MudBlazor.Variant.Text">
                                            <MudPopover Open="@context.chapter3Open" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                                                <div class="d-flex flex-column pa-2 overflow-y-auto" style="width: 400px; height: 400px;">
                                                    <span>Chapter 3 Comments</span>
                                                    <hr>
                                                    @if (isLoadingComment)
                                                    {
                                                        @foreach (CommentModel comment in context.Comments)
                                                        {
                                                            <div class="d-flex flex-column pa-2 gap-2">
                                                                <CommentComponent Comment="@comment"></CommentComponent>
                                                            </div>
                                                        }
                                                        @if(GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
                                                        {
                                                            <MudTextField @bind-Value="comment" HelperText="Type your comment here." AdornmentIcon="@Icons.Material.Filled.Send" 
                                                            Variant="MudBlazor.Variant.Text" Adornment="Adornment.End"  Margin="Margin.Dense" OnAdornmentClick="()=> AddComment(context, Enums.Chapter.Chapter3)"/>
                                                        }
                                                    }
                                                </div>
                                            </MudPopover>
                                            Comments
                                        </MudButton>
                                        <MudButton OnClick="()=> Download(context.Chapter3)" Variant="MudBlazor.Variant.Text">Download</MudButton>
                                    </div>
                                </MudPaper>
                                <hr>
                                <MudGrid Spacing="1">
                                    <MudItem xs="12">
                                        <span>Panel Recommendation</span>
                                        <hr/>
                                    </MudItem>
                                    <MudItem xs="2">
                                        <MudSelect T="Enums.Status?" Value="DenfenseVerdict.Status" ValueChanged="(e) => OnStatusChange(e)" Margin="Margin.Dense" Label="Verdict"
                                        Disabled="@((GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Admin) || (context.UserId == GlobalClass.CurrentUserAccount.UserId && GlobalClass.CurrentUserAccount.AccountType != Enums.AccountType.Panelist_Adviser) && !context.ListOfPanels.Any( e => e.UserId == GlobalClass.CurrentUserAccount.UserId))"
                                        Variant="MudBlazor.Variant.Outlined">
                                            @foreach (Enums.Status? item in Enum.GetValues(typeof(Enums.Status)))
                                            {
                                                <MudSelectItem Value="@item">@Extensions.GetEnumDescription(item)</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="8"></MudItem>
                                    <MudItem xs="2">
                                        <MudTextField T="double" @bind-Value="DenfenseVerdict.Grade" Label="Grade" Variant="MudBlazor.Variant.Outlined" Margin="Margin.Dense"
                                        Disabled="@((GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Admin) || (context.UserId == GlobalClass.CurrentUserAccount.UserId && GlobalClass.CurrentUserAccount.AccountType != Enums.AccountType.Panelist_Adviser) && !context.ListOfPanels.Any( e => e.UserId == GlobalClass.CurrentUserAccount.UserId))"></MudTextField>
                                    </MudItem>
                                    <MudItem xs="10"></MudItem>
                                    <MudItem Class="d-flex justify-content-end" xs="2">
                                        @if (context.UserId != GlobalClass.CurrentUserAccount.UserId && GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
                                        {
                                            <MudButton OnClick="()=> SaveVerdict(Enums.Chapter.Chapter1)" style="height: 40px;" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Info">SAVE</MudButton>
                                        }
                                        else if (GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
                                        {
                                            <MudButton OnClick="()=> SaveVerdict(DenfenseVerdict.Chapter)" style="height: 40px;" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Info">SAVE</MudButton>
                                        }
                                    </MudItem>
                                </MudGrid>
                            </MudTabPanel>
                            <MudTabPanel Text="Final" OnClick="()=> OnChapterChange(Enums.Chapter.Chapter3, Group)">
                                <MudPaper class="d-flex flex-column pa-3">

                                    <div class="d-flex flex-row gap-10 align-items-center">
                                        <span class="flex-1"><b>Chapter 4</b></span>
                                        <MudButton OnClick="()=>  {
                                                GetComments(Enums.Chapter.Chapter4, context, context.chapter4Open);
                                                context.chapter4Open = !context.chapter4Open;
                                                }" Variant="MudBlazor.Variant.Text">
                                            <MudPopover Open="@context.chapter4Open" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                                                <div class="d-flex flex-column pa-2 overflow-y-auto" style="width: 400px; height: 400px;">
                                                    <span>Chapter 4 Comments</span>
                                                    <hr>
                                                    @if(isLoadingComment)
                                                    {
                                                        @foreach (CommentModel comment in context.Comments)
                                                        {
                                                            <div class="d-flex flex-column pa-2 gap-2">
                                                                <CommentComponent Comment="@comment"></CommentComponent>
                                                            </div>
                                                        }
                                                        @if(GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
                                                        {
                                                            <MudTextField @bind-Value="comment" HelperText="Type your comment here." AdornmentIcon="@Icons.Material.Filled.Send" 
                                                            Variant="MudBlazor.Variant.Text" Adornment="Adornment.End"  Margin="Margin.Dense" OnAdornmentClick="()=> AddComment(context, Enums.Chapter.Chapter4)"/>
                                                        }
                                                    }
                                                </div>
                                            </MudPopover>
                                            Comments
                                        </MudButton>
                                        <MudButton OnClick="()=> Download(context.Chapter4)" Variant="MudBlazor.Variant.Text">Download</MudButton>
                                    </div>
                                    <div class="d-flex flex-row gap-10 align-items-center"> 
                                        <span class="flex-1"><b>Chapter 5</b></span>
                                        <MudButton OnClick="()=>  {
                                                GetComments(Enums.Chapter.Chapter5, context, context.chapter5Open);
                                                context.chapter5Open = !context.chapter5Open;
                                                }" Variant="MudBlazor.Variant.Text">
                                            <MudPopover Open="@context.chapter5Open" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                                                <div class="d-flex flex-column pa-2 overflow-y-auto" style="width: 400px; height: 400px;">
                                                    <span>Chapter 5 Comments</span>
                                                    <hr>
                                                    @if(isLoadingComment)
                                                    {
                                                        @foreach (CommentModel comment in context.Comments)
                                                        {
                                                            <div class="d-flex flex-column pa-2 gap-2">
                                                                <CommentComponent Comment="@comment"></CommentComponent>
                                                            </div>
                                                        }
                                                        @if(GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
                                                        {
                                                            <MudTextField @bind-Value="comment" HelperText="Type your comment here." AdornmentIcon="@Icons.Material.Filled.Send" 
                                                            Variant="MudBlazor.Variant.Text" Adornment="Adornment.End"  Margin="Margin.Dense" OnAdornmentClick="()=> AddComment(context, Enums.Chapter.Chapter5)"/>
                                                        }
                                                    }
                                                </div>
                                            </MudPopover>
                                            Comments
                                        </MudButton>
                                        <MudButton OnClick="()=> Download(context.Chapter5)" Variant="MudBlazor.Variant.Text">Download</MudButton>
                                    </div>
                                </MudPaper>
                                <hr>
                                <MudGrid Spacing="1">
                                    <MudItem xs="12">
                                        <span>Panel Recommendation</span>
                                        <hr/>
                                    </MudItem>
                                    <MudItem xs="2">
                                        <MudSelect T="Enums.Status?" Value="DenfenseVerdict.Status" ValueChanged="(e) => OnStatusChange(e)" Margin="Margin.Dense" Label="Verdict"
                                        Variant="MudBlazor.Variant.Outlined"
                                        Disabled="@((GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Admin) || (context.UserId == GlobalClass.CurrentUserAccount.UserId && GlobalClass.CurrentUserAccount.AccountType != Enums.AccountType.Panelist_Adviser) && !context.ListOfPanels.Any( e => e.UserId == GlobalClass.CurrentUserAccount.UserId))">
                                            @foreach (Enums.Status? item in Enum.GetValues(typeof(Enums.Status)))
                                            {
                                                <MudSelectItem Value="@item">@Extensions.GetEnumDescription(item)</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="8"></MudItem>
                                    <MudItem xs="2">
                                        <MudTextField T="double" @bind-Value="DenfenseVerdict.Grade" Label="Grade" Variant="MudBlazor.Variant.Outlined" Margin="Margin.Dense"
                                        Disabled="@((GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Admin) || (context.UserId == GlobalClass.CurrentUserAccount.UserId && GlobalClass.CurrentUserAccount.AccountType != Enums.AccountType.Panelist_Adviser) && !context.ListOfPanels.Any( e => e.UserId == GlobalClass.CurrentUserAccount.UserId))"></MudTextField>
                                    </MudItem>
                                    <MudItem xs="10"></MudItem>
                                    <MudItem Class="d-flex justify-content-end" xs="2">
                                        @if (context.UserId != GlobalClass.CurrentUserAccount.UserId && GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
                                        {
                                            <MudButton OnClick="()=> SaveVerdict(Enums.Chapter.Chapter5)" style="height: 40px;" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Info">SAVE</MudButton>
                                        }
                                        else if (GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
                                        {
                                            <MudButton OnClick="()=> SaveVerdict(DenfenseVerdict.Chapter)" style="height: 40px;" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Info">SAVE</MudButton>
                                        }
                                    </MudItem>
                                </MudGrid>
                            </MudTabPanel>
                        </MudTabs>
                    </div>
                </td>
            }
        </ChildRowContent>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</div>

@code {
    private IEnumerable<GroupModel> pagedData;
    private MudTable<GroupModel> table;
    public bool _isOpen;
    FilterParameter parameter = new();
    private int totalItems;
    private string searchString = null;
    private bool Loading = true, isLoadingComment;
    private List<GroupModel> ListOfGroups = new();
    DefenseVerdictModel DenfenseVerdict = new();
    GroupModel Group = new();
    private string comment = string.Empty;
    bool isLoadingType = false;
    protected override async Task OnInitializedAsync()
    {
        Task<IEnumerable<GroupModel>> data = GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Student?
            GroupServices.GetMyGroups(GlobalClass.CurrentUserAccount.UserId, new()) : GroupServices.GetGroupsWithUsers(new());
        await data;
        if(data.Status == TaskStatus.RanToCompletion) {
            ListOfGroups = data.Result.ToList();
            if (GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
            {
                foreach(var item in ListOfGroups)
                {
                    Task<IEnumerable<PanelistModel>> p = PanelistService.GetPanelGroup(item.GroupId);
                    await p;
                    if (p.Status == TaskStatus.RanToCompletion)
                    {
                        item.ListOfPanels = p.Result.ToList();
                    }

                }
                ListOfGroups = ListOfGroups.Where(e => e.UserId == GlobalClass.CurrentUserAccount.UserId || e.ListOfPanels.Any(b => b.Panel.UserId == GlobalClass.CurrentUserAccount.UserId)).ToList();

            } else
            {
                foreach (var item in ListOfGroups)
                {
                    item.Chapter1 = await CapstoneFileService.GetCapstoneFilesWithGroup2(item.GroupId, Enums.Chapter.Chapter1);
                    item.Chapter2 = await CapstoneFileService.GetCapstoneFilesWithGroup2(item.GroupId, Enums.Chapter.Chapter2);
                    item.Chapter3 = await CapstoneFileService.GetCapstoneFilesWithGroup2(item.GroupId, Enums.Chapter.Chapter3);
                    item.Chapter4 = await CapstoneFileService.GetCapstoneFilesWithGroup2(item.GroupId, Enums.Chapter.Chapter4);
                    item.Chapter5 = await CapstoneFileService.GetCapstoneFilesWithGroup2(item.GroupId, Enums.Chapter.Chapter5);
                }
            }
            totalItems = ListOfGroups.Count();
            Loading = false;
            StateHasChanged();
        }
        DenfenseVerdict.Chapter = Enums.Chapter.Title1;
    }
    private async Task OnChapterChange(Enums.Chapter e, GroupModel group)
    {

        DenfenseVerdict.Chapter = e;
        DenfenseVerdict = await _verdictService.GetVerdict(group.GroupId, e);
        DenfenseVerdict.Chapter = e;
        StateHasChanged();
    }
    private async Task AddComment(GroupModel g, Enums.Chapter chapter)
    {
        CommentModel comments = new();
        comments.Comment = comment;
        comments.Chapter = chapter;
        comments.UserId = GlobalClass.CurrentUserAccount.UserId;
        comments.GroupId = g.GroupId;
        comments.CommentDate = DateTime.Now;
        Task<CommentModel> t= CommentService.PostCommentModel(comments);
        await t;
        if(t.Status == TaskStatus.RanToCompletion)
        {
            g.Comments.Add(t.Result);
            comment = string.Empty;
        }
    }
    private void OnStatusChange(Enums.Status? e)
    {
        DenfenseVerdict.Status = e;
    }
    private async Task SaveVerdict(Enums.Chapter e){
        DenfenseVerdict.GroupId = Group.GroupId;
        DenfenseVerdict.Chapter = e;
        Task t = DenfenseVerdict.DefenseVerdictId <= 0 ? _verdictService.PostDefenseVerdictModel(DenfenseVerdict) : _verdictService.PutDefenseVerdictModel(Convert.ToInt32(DenfenseVerdict.DefenseVerdictId), DenfenseVerdict);
        await t;
        if(t.Status == TaskStatus.RanToCompletion)
        {
            Extensions.ShowAlert("Data has been saved.", MudBlazor.Variant.Filled, Snackbar, Severity.Info);
        }
    }
    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
    private async Task OpenGroupDialog(GroupModel group)
    {
        var options = new MudBlazor.DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true,BackdropClick = true };
        var param = new DialogParameters();
        param.Add("Group", group);
        var dialog =  await DialogService.Show<GroupDialog>(group.GroupId == 0 ? "Add Group" : "Edit Group", param, options).Result;
        if(!dialog.Canceled)
        {
            await table.ReloadServerData();
        }
    }
    private async Task RemoveGroup(GroupModel group)
    {
        Task t = GroupServices.DeleteGroupModel(group.GroupId);
        await t;
        if(t.Status == TaskStatus.RanToCompletion)
        {
            Extensions.ShowAlert("Group has been removed.", MudBlazor.Variant.Filled, Snackbar, Severity.Info);
        }
    }
    private async Task AddMembers(GroupModel group)
    {
        var options = new MudBlazor.DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true,BackdropClick = true };
        var param = new DialogParameters();
        param.Add("Group", group);
        var dialog =  await DialogService.Show<AddMembersDialog>("Add Members", param, options).Result;
        if(!dialog.Canceled)
        {
            await table.ReloadServerData();
        }
    }
    private async Task GetFiles(GroupModel group) {
        Task<IEnumerable<CapstoneFileModel>> listFiles = CapstoneFileService.GetCapstoneFilesWithGroup(group.GroupId);
        await listFiles;
        if(listFiles.Status == TaskStatus.RanToCompletion) {
            group.ListOfCapstionFiles = listFiles.Result.ToList();
            group.Title1 = group.ListOfCapstionFiles.Where( e => e.Chapter == Enums.Chapter.Title1).FirstOrDefault()?? new();
            group.Title2 = group.ListOfCapstionFiles.Where( e => e.Chapter == Enums.Chapter.Title2).FirstOrDefault()?? new();
            group.Title3 = group.ListOfCapstionFiles.Where( e => e.Chapter == Enums.Chapter.Title3).FirstOrDefault()?? new();
            Group = group;
            await OnChapterChange(Enums.Chapter.Title1, group);
        }
        group.IsShowDetails = !group.IsShowDetails;
        StateHasChanged();
    }
    private async Task GetComments(Enums.Chapter chap, GroupModel group, bool open) {
        isLoadingComment = false;
        Task<IEnumerable<CommentModel>> c = CommentService.GetCommentsByGroupAndChapter(group, chap);
        await c;
        if(c.Status == TaskStatus.RanToCompletion){
            group.Comments = c.Result.ToList();
            isLoadingComment = true;
            open = !open;
        }
        StateHasChanged();
    }
    private async Task Download(CapstoneFileModel CapstoneFile)
    {
        if(CapstoneFile.File == null)
        {
            Extensions.ShowAlert("No file has been found.", MudBlazor.Variant.Filled, Snackbar, Severity.Error);
            return;
        }
        if(CapstoneFile.File.Length <= 0)
        {
            Extensions.ShowAlert("No file has been found.", MudBlazor.Variant.Filled, Snackbar, Severity.Error);
            return;
        }
        await Extensions.Download(CapstoneFile.File, CapstoneFile.FileName, JSRuntime);
    }
    private async Task View(CapstoneFileModel CapstoneFile)
    {
        Console.WriteLine(Extensions.GetContentType(CapstoneFile.FileName?? ""));
        var options = new MudBlazor.DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large, FullWidth = true, BackdropClick = true };
        var param = new DialogParameters();
        param.Add("FileName", CapstoneFile.FileName);
        param.Add("FileStream", CapstoneFile.File);
        param.Add("ContentType", Extensions.GetContentType(CapstoneFile.FileName?? ""));
        var dialog =  await DialogService.Show<DocumentViewerDialog>("VIEW DOCUMENT", param, options).Result;
        if(!dialog.Canceled)
        {

        }
    }
    public void Toggle()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }
    private async Task Filter()
    {
        Loading = true;
        Task<IEnumerable<GroupModel>> data = GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Student?
            GroupServices.GetMyGroups(GlobalClass.CurrentUserAccount.UserId, parameter) : GroupServices.GetGroupsWithUsers(parameter);
        await data;
        if(data.Status == TaskStatus.RanToCompletion) {
            ListOfGroups = data.Result.ToList();
            if (GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Panelist_Adviser)
            {
                ListOfGroups = ListOfGroups.Where(e => e.UserId == GlobalClass.CurrentUserAccount.UserId).ToList();
            }
            totalItems = ListOfGroups.Count();
            Loading = false;
            Toggle();
            StateHasChanged();
        }
    }
    private async Task Filter(bool isPanelist)
    {
        await OnInitializedAsync();
        if(isPanelist) {
            ListOfGroups = ListOfGroups.Where(e => e.ListOfPanels.Any(b => b.Panel.UserId == GlobalClass.CurrentUserAccount.UserId)).ToList();
        } else {
            ListOfGroups = ListOfGroups.Where(e => e.UserId == GlobalClass.CurrentUserAccount.UserId).ToList();
        }
    }
    private async Task SavePanelGrade(MembersModel member) {
        member.CurrentPanelGrade.MemberId = member.MemberId;
        member.CurrentPanelGrade.UserId = GlobalClass.CurrentUserAccount.UserId;
        member.CurrentPanelGrade = member.CurrentPanelGrade.PanelGradeId <= 0 ?
        await _panelGradeService.PostPanelGrade(member.CurrentPanelGrade) :
        await _panelGradeService.PutPanelGrade(member.CurrentPanelGrade.PanelGradeId, member.CurrentPanelGrade);
        Extensions.ShowAlert("Grade has been save.", MudBlazor.Variant.Filled, Snackbar, Severity.Success);
    }
    private async Task GetPanelGrade(MembersModel member, Enums.FilePosition defenseType, bool closePanel) {
        isLoadingType = true;
        member.CurrentPanelGrade = await _panelGradeService.GetPanelGrade(GlobalClass.CurrentUserAccount.UserId, member.MemberId, defenseType);
        if(closePanel)
            member.OpenGrade = !member.OpenGrade;
        ListOfGroups.ForEach(e => {
            e.Members.ForEach(e =>
            {
                if(member.MemberId != e.MemberId)
                    e.OpenGrade = false;
            });
        });
        isLoadingType = false;
        Console.WriteLine(defenseType);
        StateHasChanged();
    }
}
<style>
    .mud-toolbar.mud-table-toolbar
    {
        height: 40px;
        display: flex;
        align-items: end;
    }
</style>