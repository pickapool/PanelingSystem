@inject ISnackbar Snackbar

<div class="d-flex flex-column box pa-1 mr-4 mb-4 gap-0">
    <span<b>@Schedule.Text</b></span>
   <hr>
    <div class="d-flex flex-row">
        <MudChip Color="Color.Info" Size="Size.Small">@Extensions.GetEnumDescription(@Schedule.DefenseType)</MudChip>
        <MudChip Color="Color.Warning" Size="Size.Small">@Extensions.GetEnumDescription(@Schedule.Status)</MudChip>
    </div>
    <span>Members</span>
    <div class="d-flex flex-row justify-content-between">
        <MudAvatarGroup Max="6" Spacing="2" MaxColor="Color.Primary">
            @foreach(MembersModel member in Group.Members)
            {
            <MudTooltip Text="@member.Student.Name">
                @if (member.Student.ProfilePicture.Count() == 0) {
                    <MudAvatar Image="img/blank_profile.png" />
                } else {
                    <MudAvatar Image='@($"data:image/png;base64, {Convert.ToBase64String(member.Student.ProfilePicture)}")' />
                }
            </MudTooltip>
            }
        </MudAvatarGroup>
    </div>
    <span>Panels</span>
    <div class="d-flex flex-row justify-content-between">
            <MudAvatarGroup Max="6" Spacing="2" MaxColor="Color.Primary">
                <MudBadge Color="Color.Error" Icon="@Icons.Material.Filled.Remove" Overlap="true" Bordered="true">
                    @* @if (Account.ProfilePicture.Count() == 0) {
                        <MudAvatar Class='mt-4' Image="img/blank_profile.png" />
                    } else {
                        <MudAvatar Class='mr-4' Image='@($"data:image/png;base64, {Convert.ToBase64String(Account.ProfilePicture)}")' />
                    } *@
                    <MudAvatar Image="images/toiletvisit.jpg" />
                </MudBadge>
            </MudAvatarGroup>
        <MudTooltip Text="Add Panels">
            <MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="add" Color="Color.Info" Size="Size.Small"></MudIconButton>
        </MudTooltip>
    </div>
</div>
@code
{
    [Parameter] public ScheduleModel Schedule { get; set; }
    [Parameter] public List<GroupModel> ListGroups { get; set; }
    private GroupModel Group { get; set; }

    protected override async Task OnParametersSetAsync()
    {
       Group = ListGroups.FirstOrDefault( e => e.GroupId == Schedule.GroupId) ?? new();
    }

    private async Task Remove()
    {
        Extensions.ShowAlert("asdas" , MudBlazor.Variant.Filled, Snackbar, Severity.Normal);
    }
}
<style>
    .box
    {
        @* height: 150px; *@
        border-radius: 5px;
        border-left: 8px solid #05173D;
    }
    .mud-badge
    {
        z-index: 2;
        margin-top: 2px;
        margin-right: 2px;
        cursor: pointer;
    }
</style>