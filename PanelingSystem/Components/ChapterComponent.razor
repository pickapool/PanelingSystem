@inject ICapstoneFileService CapstoneFileService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<MudPaper Class="d-flex flex-column capstone pa-2" Elevation="3">
    <div class="d-flex flex-row align-items-center">
        <MudIcon Class="mr-4" Icon="@Icons.Material.Filled.FilePresent" Size="Size.Large"/>
        <MudText Typo="Typo.h6">
            @if(Chapter == Enums.Chapter.Title1 || Chapter == Enums.Chapter.Title2 || Chapter == Enums.Chapter.Title3) {
                <span style="margin-right: 20px;">@Title - </span>
            } else {
                <span>@Title</span>
            }
        </MudText>
        @if(Chapter == Enums.Chapter.Title1 || Chapter == Enums.Chapter.Title2 || Chapter == Enums.Chapter.Title3) {
            <MudTextField Typo="Typo.subtitle1" style="margin-bottom: 20px;" @bind-Value="@CapstoneFile.Title" Margin="Margin.Dense"
            AdornmentColor="Color.Primary"
            Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Save" OnAdornmentClick="Save"
            ></MudTextField>
        }
        <MudSpacer/>
        <MudIconButton OnClick="()=> Click()" Class="mt-2" Icon="@Icons.Material.Filled.Comment" Size="Size.Medium"/>
        <MudIconButton OnClick="()=> Download()" Class="mt-2" Icon="@Icons.Material.Filled.FileDownload" Size="Size.Medium"/>
        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
        <ButtonTemplate>
            <MudButton HtmlTag="label"
                    Variant="MudBlazor.Variant.Text"
                    Size="Size.Large"
                    Color="Color.Primary"
                    StartIcon="@Icons.Material.Filled.CloudUpload">
            </MudButton>
    </ButtonTemplate>
</MudFileUpload>
    </div>
     <MudText Typo="Typo.body1">@(CapstoneFile.DateAdded == null || CapstoneFile.File.Length <= 0 ? "No File" : CapstoneFile.DateAdded?.ToString("MMMM dd, yyyy hh:mm tt"))</MudText>
</MudPaper>

@code
{
    [Parameter] public string Title { get; set; }
    [Parameter] public string DateFile { get; set; }
    [Parameter] public Enums.Chapter Chapter { get; set;}
    [Parameter] public GroupModel Group { get; set; }
    [Parameter] public List<CapstoneFileModel> ListChapters { get; set; }
    [Parameter] public EventCallback OnClick { get; set; }
    private CapstoneFileModel CapstoneFile = new();
    protected override void OnParametersSet()
    {
        CapstoneFile = ListChapters.Where(e => e.Chapter == Chapter && e.GroupId == Group.GroupId).FirstOrDefault() ?? new();
    }
    private async Task Click()
    {
        await OnClick.InvokeAsync();
    }
    private async Task UploadFiles(IBrowserFile file)
    {
        if(GlobalClass.CurrentUserAccount.AccountType == Enums.AccountType.Student) {
            if (Group.Members.Any(e => (e.TitleGrade <= 0) && (Chapter == Enums.Chapter.Chapter1 || Chapter == Enums.Chapter.Chapter2 || Chapter == Enums.Chapter.Chapter3)))
            {
                Extensions.ShowAlert("Upload is restricted, grade not found in Title Defense", MudBlazor.Variant.Filled, Snackbar, Severity.Error);
                return;
            }
            if (Group.Members.Any(e => (e.PreOralGrade <= 0) && (Chapter == Enums.Chapter.Chapter4 || Chapter == Enums.Chapter.Chapter5)))
            {
                Extensions.ShowAlert("Upload is restricted, grade not found in Pre Oral Defense", MudBlazor.Variant.Filled, Snackbar, Severity.Error);
                return;
            }
        }
        CapstoneFile.File = await Extensions.ToByteArrayAsync(file);
        CapstoneFile.Chapter = Chapter;
        CapstoneFile.FileName = file.Name;
        CapstoneFile.GroupId = Group.GroupId;
        CapstoneFile.DateAdded = DateTime.Now;
        Task<CapstoneFileModel> t = CapstoneFile.CapstoneFileId == 0 ? CapstoneFileService.PostCapstoneFileModel(CapstoneFile) : CapstoneFileService.PutCapstoneFileModel(CapstoneFile.CapstoneFileId, CapstoneFile);
        await t;
        if(t.Status == TaskStatus.RanToCompletion)
        {
            Extensions.ShowAlert("File has been uploaded.", MudBlazor.Variant.Filled , Snackbar, Severity.Success);
            CapstoneFile = t.Result;
        }
        //TODO upload the files to the server
    }
    private async Task Save() {
        CapstoneFile.Chapter = Chapter;
        CapstoneFile.GroupId = Group.GroupId;
        CapstoneFile.DateAdded = DateTime.Now;
        Task<CapstoneFileModel> t = CapstoneFile.CapstoneFileId == 0 ? CapstoneFileService.PostCapstoneFileModel(CapstoneFile) : CapstoneFileService.PutCapstoneFileModel(CapstoneFile.CapstoneFileId, CapstoneFile);
        await t;
        if(t.Status == TaskStatus.RanToCompletion)
        {
            Extensions.ShowAlert("Title has been uploaded.", MudBlazor.Variant.Filled , Snackbar, Severity.Success);
            CapstoneFile = t.Result;
        }
    }
    private async Task Download()
    {
        if(CapstoneFile.File == null)
        {
            Extensions.ShowAlert("No file has been found.", MudBlazor.Variant.Filled, Snackbar, Severity.Error);
            return;
        }
        if(CapstoneFile.File.Length <= 0)
        {
            Extensions.ShowAlert("No file has been found.", MudBlazor.Variant.Filled, Snackbar, Severity.Error);
            return;
        }
        await Extensions.Download(CapstoneFile.File, CapstoneFile.FileName, JSRuntime);
    }
}