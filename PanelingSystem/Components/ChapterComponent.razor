@inject ICapstoneFileService CapstoneFileService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<MudPaper Class="d-flex flex-column capstone pa-2" Elevation="3" >
    <div class="d-flex flex-row align-items-center">
        <MudIcon Class="mr-4" Icon="@Icons.Material.Filled.FilePresent" Size="Size.Large"/>
        <MudText Typo="Typo.h3">@Title</MudText>
        <MudSpacer/>
        <MudIconButton OnClick="()=> Download()" Class="mt-2" Icon="@Icons.Material.Filled.FileDownload" Size="Size.Medium"/>
        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
        <ButtonTemplate>
            <MudButton HtmlTag="label"
                    Variant="MudBlazor.Variant.Text"
                    Size="Size.Large"
                    Color="Color.Primary"
                    StartIcon="@Icons.Material.Filled.CloudUpload"
                    for="@context.Id">
            </MudButton>
    </ButtonTemplate>
</MudFileUpload>
    </div>
     <MudText Typo="Typo.body1">@(CapstoneFile.DateAdded == null ? "No File" : CapstoneFile.DateAdded?.ToString("MMMM dd, yyyy hh:mm tt"))</MudText>
</MudPaper>

@code
{
    [Parameter] public string Title { get; set; }
    [Parameter] public string DateFile { get; set; }
    [Parameter] public Enums.Chapter Chapter { get; set;}
    [Parameter] public int GroupId { get; set; }
    [Parameter] public List<CapstoneFileModel> ListChapters { get; set; }
    [Parameter] publci EventCallback OnClick { get; set; }
    private CapstoneFileModel CapstoneFile = new();
    protected override void OnParametersSet()
    {
        CapstoneFile = ListChapters.Where( e => e.Chapter == Chapter && e.GroupId == GroupId).FirstOrDefault()?? new();
    }
    private async Task UploadFiles(IBrowserFile file)
    {
        CapstoneFile.File = await Extensions.ToByteArrayAsync(file);
        CapstoneFile.Chapter = Chapter;
        CapstoneFile.FileName = file.Name;
        CapstoneFile.GroupId = GroupId;
        CapstoneFile.DateAdded = DateTime.Now;
        Task<CapstoneFileModel> t = CapstoneFile.CapstoneFileId == 0 ? CapstoneFileService.PostCapstoneFileModel(CapstoneFile) : CapstoneFileService.PutCapstoneFileModel(CapstoneFile.CapstoneFileId, CapstoneFile);
        await t;
        if(t.Status == TaskStatus.RanToCompletion)
        {
            Extensions.ShowAlert("File has been uploaded.", MudBlazor.Variant.Filled , Snackbar, Severity.Success);
            CapstoneFile = t.Result;
        }
        //TODO upload the files to the server
    }
    private async Task Download()
    {
        if(CapstoneFile.File == null)
        {
            Extensions.ShowAlert("No file has been found.", MudBlazor.Variant.Filled, Snackbar, Severity.Error);
            return;
        }
        await Extensions.Download(CapstoneFile.File, CapstoneFile.FileName, JSRuntime);
    }
}