@inherits LayoutComponentBase

@inject IAccountService AccountService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject ILocalStorageService LocalStorageService
@inject AppState AppState

<PageTitle>Paneling System</PageTitle>

<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>
<RadzenComponents/>
<RadzenDialog /> 
<MudPopoverProvider/>
<div class="page">
    @if (dataFetch)
    {
        @if (GlobalClass.CurrentUserAccount != null)
        {

            <div class="sidebar">
                <NavMenu />
            </div>

            <main>
                <div class="top-row px-4">
                    <PersonTemplate Account="GlobalClass.CurrentUserAccount"/>
                    <MudIconButton OnClick="()=> ToggleOpen()" Icon="@Icons.Material.Filled.KeyboardArrowDown" Size="Size.Small"/>
                    <div class="profile-popup">
                        <MudPopover Open="@_isOpen" Fixed="true" Class="pa-1 mr-2" TransformOrigin="Origin.TopLeft" AnchorOrigin="Origin.BottomRight">
                            <ProfileInformation OnCloseDialog="@ToggleOpen" Account="GlobalClass.CurrentUserAccount"/>
                        </MudPopover>
                    </div>
                </div>

                <article class="content px-4">
                    @Body
                </article>
            </main>
            } else {
                <Login/>
            }
    } else {
           <div class="d-flex justify-content-center align-items-center" style="height : 90vh; width: 100%;">
                <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
            </div>
        }
</div>
@code
{
    public bool _isOpen, dataFetch  = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await VerifyLogin();
            AppState.OnChange += UpdateState;
        }
    }
    private async Task VerifyLogin()
    {
        try
        {
            dataFetch = false;
            ValueTask<UserAccountModel?> account = LocalStorageService.GetItemAsync<UserAccountModel>("Account");
            await account;
            if (account.Result != null)
            {
                Task<UserAccountModel> model = AccountService.GetUserAccountModel(account.Result.UserId);
                await model;
                if(model.Status == TaskStatus.RanToCompletion)
                {
                    GlobalClass.CurrentUserAccount = model.Result;
                    dataFetch = true;
                    await AppState.NotifyStateChangedAsync();
                    StateHasChanged();
                }
            } else {
                dataFetch = true;
                StateHasChanged();
            }
        } catch(Exception ee)
        {
            Console.WriteLine(ee.Message);
        }
    }
    private void UpdateState()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    public void ToggleOpen()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }
}
<style>
    .page
    {
        overflow: hidden;
    }
    .profile-popup .mud-popover
    {
        left: 1300px !important;
    }
</style>